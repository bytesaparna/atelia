/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IContractBase {
  export type AdoTypeResponseStruct = { ado_type: string };

  export type AdoTypeResponseStructOutput = [ado_type: string] & {
    ado_type: string;
  };

  export type VersionResponseStruct = { version: string };

  export type VersionResponseStructOutput = [version: string] & {
    version: string;
  };
}

export declare namespace AmpMsgLib {
  export type AmpPktCtxStruct = {
    origin: AddressLike;
    previous_sender: AddressLike;
  };

  export type AmpPktCtxStructOutput = [
    origin: string,
    previous_sender: string
  ] & { origin: string; previous_sender: string };

  export type AmpPktStruct = {
    message: BytesLike;
    funds: BigNumberish;
    ctx: AmpMsgLib.AmpPktCtxStruct;
  };

  export type AmpPktStructOutput = [
    message: string,
    funds: bigint,
    ctx: AmpMsgLib.AmpPktCtxStructOutput
  ] & { message: string; funds: bigint; ctx: AmpMsgLib.AmpPktCtxStructOutput };

  export type AmpMsgConfigStruct = { exit_at_error: boolean };

  export type AmpMsgConfigStructOutput = [exit_at_error: boolean] & {
    exit_at_error: boolean;
  };

  export type AmpMsgStruct = {
    recipient: string;
    message: BytesLike;
    funds: BigNumberish;
    config: AmpMsgLib.AmpMsgConfigStruct;
  };

  export type AmpMsgStructOutput = [
    recipient: string,
    message: string,
    funds: bigint,
    config: AmpMsgLib.AmpMsgConfigStructOutput
  ] & {
    recipient: string;
    message: string;
    funds: bigint;
    config: AmpMsgLib.AmpMsgConfigStructOutput;
  };
}

export declare namespace IKernelContract {
  export type BatchMessageStruct = {
    data: BytesLike;
    message_type: BigNumberish;
  };

  export type BatchMessageStructOutput = [
    data: string,
    message_type: bigint
  ] & { data: string; message_type: bigint };

  export type GetEnvParamsStruct = { key: string };

  export type GetEnvParamsStructOutput = [key: string] & { key: string };

  export type GetKeyAddressParamsStruct = { key: string };

  export type GetKeyAddressParamsStructOutput = [key: string] & { key: string };

  export type KernelInitParamsStruct = {
    owner: AddressLike;
    chain_name: string;
  };

  export type KernelInitParamsStructOutput = [
    owner: string,
    chain_name: string
  ] & { owner: string; chain_name: string };

  export type InstantiateAdoParamStruct = { ado_type: string };

  export type InstantiateAdoParamStructOutput = [ado_type: string] & {
    ado_type: string;
  };

  export type SetEnvParamsStruct = { key: string; value: string };

  export type SetEnvParamsStructOutput = [key: string, value: string] & {
    key: string;
    value: string;
  };

  export type UnsetEnvParamsStruct = { key: string };

  export type UnsetEnvParamsStructOutput = [key: string] & { key: string };

  export type UpdateChainNameParamsStruct = { chain_name: string };

  export type UpdateChainNameParamsStructOutput = [chain_name: string] & {
    chain_name: string;
  };

  export type UpsertKeyAddressParamsStruct = {
    key: string;
    value: AddressLike;
  };

  export type UpsertKeyAddressParamsStructOutput = [
    key: string,
    value: string
  ] & { key: string; value: string };
}

export interface KernelContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "ado_type"
      | "ampReceive"
      | "batch_messages"
      | "chain_name"
      | "get_env"
      | "get_key_address"
      | "implementation"
      | "init_empty_slot"
      | "initialize"
      | "instantiate_ado(address,bytes)"
      | "instantiate_ado((string),bytes)"
      | "instantiate_empty_slot"
      | "is_verified"
      | "migrate_ado"
      | "proxiableUUID"
      | "send"
      | "set_env"
      | "tmp_deployer"
      | "unset_env"
      | "update_chain_name"
      | "upgradeToAndCall"
      | "upsert_key_address"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AdoDefaultInitialized" | "Initialized" | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ado_type", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ampReceive",
    values: [AmpMsgLib.AmpPktStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "batch_messages",
    values: [IKernelContract.BatchMessageStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "chain_name",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_env",
    values: [IKernelContract.GetEnvParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "get_key_address",
    values: [IKernelContract.GetKeyAddressParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init_empty_slot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [IKernelContract.KernelInitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiate_ado(address,bytes)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiate_ado((string),bytes)",
    values: [IKernelContract.InstantiateAdoParamStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiate_empty_slot",
    values: [IKernelContract.InstantiateAdoParamStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "is_verified",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate_ado",
    values: [AddressLike, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [AmpMsgLib.AmpMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "set_env",
    values: [IKernelContract.SetEnvParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tmp_deployer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unset_env",
    values: [IKernelContract.UnsetEnvParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "update_chain_name",
    values: [IKernelContract.UpdateChainNameParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upsert_key_address",
    values: [IKernelContract.UpsertKeyAddressParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ado_type", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ampReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batch_messages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chain_name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_env", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_key_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "init_empty_slot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "instantiate_ado(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiate_ado((string),bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiate_empty_slot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "is_verified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrate_ado",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_env", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tmp_deployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unset_env", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "update_chain_name",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upsert_key_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AdoDefaultInitializedEvent {
  export type InputTuple = [
    adoType: string,
    version: string,
    adoOwner: AddressLike
  ];
  export type OutputTuple = [
    adoType: string,
    version: string,
    adoOwner: string
  ];
  export interface OutputObject {
    adoType: string;
    version: string;
    adoOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KernelContract extends BaseContract {
  connect(runner?: ContractRunner | null): KernelContract;
  waitForDeployment(): Promise<this>;

  interface: KernelContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  ado_type: TypedContractMethod<
    [],
    [IContractBase.AdoTypeResponseStructOutput],
    "view"
  >;

  ampReceive: TypedContractMethod<
    [packet: AmpMsgLib.AmpPktStruct],
    [void],
    "payable"
  >;

  batch_messages: TypedContractMethod<
    [messages: IKernelContract.BatchMessageStruct[]],
    [void],
    "nonpayable"
  >;

  chain_name: TypedContractMethod<[], [string], "view">;

  get_env: TypedContractMethod<
    [params: IKernelContract.GetEnvParamsStruct],
    [string],
    "view"
  >;

  get_key_address: TypedContractMethod<
    [params: IKernelContract.GetKeyAddressParamsStruct],
    [string],
    "view"
  >;

  implementation: TypedContractMethod<[], [string], "view">;

  init_empty_slot: TypedContractMethod<
    [proxy: AddressLike],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [params: IKernelContract.KernelInitParamsStruct],
    [void],
    "nonpayable"
  >;

  "instantiate_ado(address,bytes)": TypedContractMethod<
    [implementation: AddressLike, instantiate_msg: BytesLike],
    [string],
    "nonpayable"
  >;

  "instantiate_ado((string),bytes)": TypedContractMethod<
    [
      params: IKernelContract.InstantiateAdoParamStruct,
      instantiate_msg: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  instantiate_empty_slot: TypedContractMethod<
    [
      params: IKernelContract.InstantiateAdoParamStruct,
      instantiate_msg: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  is_verified: TypedContractMethod<
    [contract_address: AddressLike],
    [boolean],
    "view"
  >;

  migrate_ado: TypedContractMethod<
    [
      ado_address: AddressLike,
      new_ado_type: string,
      new_ado_version: string,
      migrate_msg: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  send: TypedContractMethod<
    [amp_msg: AmpMsgLib.AmpMsgStruct],
    [void],
    "nonpayable"
  >;

  set_env: TypedContractMethod<
    [params: IKernelContract.SetEnvParamsStruct],
    [void],
    "nonpayable"
  >;

  tmp_deployer: TypedContractMethod<
    [contract_address: AddressLike],
    [string],
    "view"
  >;

  unset_env: TypedContractMethod<
    [params: IKernelContract.UnsetEnvParamsStruct],
    [void],
    "nonpayable"
  >;

  update_chain_name: TypedContractMethod<
    [params: IKernelContract.UpdateChainNameParamsStruct],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  upsert_key_address: TypedContractMethod<
    [params: IKernelContract.UpsertKeyAddressParamsStruct],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<
    [],
    [IContractBase.VersionResponseStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ado_type"
  ): TypedContractMethod<
    [],
    [IContractBase.AdoTypeResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "ampReceive"
  ): TypedContractMethod<[packet: AmpMsgLib.AmpPktStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "batch_messages"
  ): TypedContractMethod<
    [messages: IKernelContract.BatchMessageStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chain_name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "get_env"
  ): TypedContractMethod<
    [params: IKernelContract.GetEnvParamsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_key_address"
  ): TypedContractMethod<
    [params: IKernelContract.GetKeyAddressParamsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "init_empty_slot"
  ): TypedContractMethod<[proxy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [params: IKernelContract.KernelInitParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "instantiate_ado(address,bytes)"
  ): TypedContractMethod<
    [implementation: AddressLike, instantiate_msg: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "instantiate_ado((string),bytes)"
  ): TypedContractMethod<
    [
      params: IKernelContract.InstantiateAdoParamStruct,
      instantiate_msg: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "instantiate_empty_slot"
  ): TypedContractMethod<
    [
      params: IKernelContract.InstantiateAdoParamStruct,
      instantiate_msg: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "is_verified"
  ): TypedContractMethod<[contract_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "migrate_ado"
  ): TypedContractMethod<
    [
      ado_address: AddressLike,
      new_ado_type: string,
      new_ado_version: string,
      migrate_msg: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [amp_msg: AmpMsgLib.AmpMsgStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "set_env"
  ): TypedContractMethod<
    [params: IKernelContract.SetEnvParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tmp_deployer"
  ): TypedContractMethod<[contract_address: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "unset_env"
  ): TypedContractMethod<
    [params: IKernelContract.UnsetEnvParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "update_chain_name"
  ): TypedContractMethod<
    [params: IKernelContract.UpdateChainNameParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "upsert_key_address"
  ): TypedContractMethod<
    [params: IKernelContract.UpsertKeyAddressParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<
    [],
    [IContractBase.VersionResponseStructOutput],
    "view"
  >;

  getEvent(
    key: "AdoDefaultInitialized"
  ): TypedContractEvent<
    AdoDefaultInitializedEvent.InputTuple,
    AdoDefaultInitializedEvent.OutputTuple,
    AdoDefaultInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdoDefaultInitialized(string,string,address)": TypedContractEvent<
      AdoDefaultInitializedEvent.InputTuple,
      AdoDefaultInitializedEvent.OutputTuple,
      AdoDefaultInitializedEvent.OutputObject
    >;
    AdoDefaultInitialized: TypedContractEvent<
      AdoDefaultInitializedEvent.InputTuple,
      AdoDefaultInitializedEvent.OutputTuple,
      AdoDefaultInitializedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
