/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  ExchangeContract,
  ExchangeContractInterface,
} from "../ExchangeContract";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "libraryAddress",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "UPGRADE_INTERFACE_VERSION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "_buy",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "recipient",
        type: "tuple",
        internalType: "struct RecipientLib.Recipient",
        components: [
          {
            name: "recipient",
            type: "string",
            internalType: "string",
          },
          {
            name: "message",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "add_funds",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "add_funds",
    inputs: [
      {
        name: "dynamic_exchange_rate",
        type: "tuple",
        internalType: "struct IExchangeContract.DynamicExchangeRate",
        components: [
          {
            name: "max_inflow_amount",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "add_funds",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "dynamic_exchange_rate",
        type: "tuple",
        internalType: "struct IExchangeContract.DynamicExchangeRate",
        components: [
          {
            name: "max_inflow_amount",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "add_funds",
    inputs: [],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "ado_type",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IContractBase.AdoTypeResponse",
        components: [
          {
            name: "ado_type",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ampReceive",
    inputs: [
      {
        name: "packet",
        type: "tuple",
        internalType: "struct AmpMsgLib.AmpPkt",
        components: [
          {
            name: "message",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "funds",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "ctx",
            type: "tuple",
            internalType: "struct AmpMsgLib.AmpPktCtx",
            components: [
              {
                name: "origin",
                type: "address",
                internalType: "address",
              },
              {
                name: "previous_sender",
                type: "address",
                internalType: "address",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "buy",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "recipient",
        type: "tuple",
        internalType: "struct RecipientLib.Recipient",
        components: [
          {
            name: "recipient",
            type: "string",
            internalType: "string",
          },
          {
            name: "message",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "buy",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "buy",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "buy",
    inputs: [
      {
        name: "recipient",
        type: "tuple",
        internalType: "struct RecipientLib.Recipient",
        components: [
          {
            name: "recipient",
            type: "string",
            internalType: "string",
          },
          {
            name: "message",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "cancel_sale",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "config",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IExchangeContract.ConfigResponse",
        components: [
          {
            name: "from_asset",
            type: "tuple",
            internalType: "struct AssetLib.ResolvedAsset",
            components: [
              {
                name: "native",
                type: "string",
                internalType: "string",
              },
              {
                name: "smart",
                type: "address",
                internalType: "address",
              },
            ],
          },
          {
            name: "to_asset",
            type: "tuple",
            internalType: "struct AssetLib.ResolvedAsset",
            components: [
              {
                name: "native",
                type: "string",
                internalType: "string",
              },
              {
                name: "smart",
                type: "address",
                internalType: "address",
              },
            ],
          },
          {
            name: "exchange_rate_bps",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "exchanged_amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "start_time",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "end_time",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "recipient",
            type: "tuple",
            internalType: "struct RecipientLib.Recipient",
            components: [
              {
                name: "recipient",
                type: "string",
                internalType: "string",
              },
              {
                name: "message",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "implementation",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "params",
        type: "tuple",
        internalType: "struct IExchangeContract.ExchangeContractInitParams",
        components: [
          {
            name: "owner",
            type: "address",
            internalType: "address",
          },
          {
            name: "from_asset",
            type: "tuple",
            internalType: "struct AssetLib.Asset",
            components: [
              {
                name: "native",
                type: "string",
                internalType: "string",
              },
              {
                name: "smart",
                type: "string",
                internalType: "string",
              },
            ],
          },
          {
            name: "to_asset",
            type: "tuple",
            internalType: "struct AssetLib.Asset",
            components: [
              {
                name: "native",
                type: "string",
                internalType: "string",
              },
              {
                name: "smart",
                type: "string",
                internalType: "string",
              },
            ],
          },
          {
            name: "recipient",
            type: "tuple",
            internalType: "struct RecipientLib.Recipient",
            components: [
              {
                name: "recipient",
                type: "string",
                internalType: "string",
              },
              {
                name: "message",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
          {
            name: "exchange_rate_bps",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "schedule",
            type: "tuple",
            internalType: "struct ScheduleLib.Schedule",
            components: [
              {
                name: "start",
                type: "tuple",
                internalType: "struct ScheduleLib.Expiry",
                components: [
                  {
                    name: "from_now",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "at_time",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "infinite",
                    type: "bool",
                    internalType: "bool",
                  },
                ],
              },
              {
                name: "end",
                type: "tuple",
                internalType: "struct ScheduleLib.Expiry",
                components: [
                  {
                    name: "from_now",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "at_time",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "infinite",
                    type: "bool",
                    internalType: "bool",
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "upgradeToAndCall",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IContractBase.VersionResponse",
        components: [
          {
            name: "version",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "AdoDefaultInitialized",
    inputs: [
      {
        name: "adoType",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "version",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "adoOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: [],
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidShortString",
    inputs: [],
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: [],
  },
  {
    type: "error",
    name: "StringTooLong",
    inputs: [
      {
        name: "str",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "StringsInsufficientHexLength",
    inputs: [
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "length",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "UUPSUnauthorizedCallContext",
    inputs: [],
  },
  {
    type: "error",
    name: "UUPSUnsupportedProxiableUUID",
    inputs: [
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "Unauthorized",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x61012080604052346102695761002b906129e08038038091610021828561026d565b83398101906102a4565b60405161003960408261026d565b600881526765786368616e676560c01b60208201526040519061005d60408361026d565b60058252640302e312e360dc1b6020830152306080526040519061008260608361026d565b602182527f616e64726f6d6564612e73746f726167652e7374642e61646f2e64656661756c6020830152601d60fa1b60408301526020610101604051936100ca60408661026d565b60058552640302e302e360dc1b8386015261011360405195869384936327a0d66960e01b85526040600486015260448501906102c3565b838103600319016024850152906102c3565b03816001600160a01b0388165afa93841561025e5761014b94610143935f9161022f575b5060a05260c0526102e7565b60e0526102e7565b610100525f5160206129c05f395f51905f525460ff8160401c16610220576002600160401b03196001600160401b038216016101ca575b604051612684908161033c823960805181818161044f015261058a015260a05181611cdf015260c05181505060e0518181816104920152610b8101526101005181610ea10152f35b6001600160401b0319166001600160401b039081175f5160206129c05f395f51905f52556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f610182565b63f92ee8a960e01b5f5260045ffd5b610251915060203d602011610257575b610249818361026d565b8101906102a4565b5f610137565b503d61023f565b6040513d5f823e3d90fd5b5f80fd5b601f909101601f19168101906001600160401b0382119082101761029057604052565b634e487b7160e01b5f52604160045260245ffd5b9081602091031261026957516001600160a01b03811681036102695790565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b601f815111610312576020815191015160208210610303571790565b5f198260200360031b1b161790565b60405163305a27a960e01b8152602060048201529081906103379060248301906102c3565b0390fdfe60806040526004361015610015575b366114d757005b5f3560e01c8063045ffa7914610144578063054ad75b1461013f5780631a147c291461013a5780631dffd4041461013557806344b0f016146101305780634f1ef2861461012b57806352d1902d1461012657806354fd4d50146101215780635c60da1b1461011c57806369c1d4a9146101175780636af15d041461011257806379502c551461010d578063a6f2ae3a14610108578063a907652b14610103578063ad3cb1cc146100fe578063c47bc007146100f9578063d96a094a146100f4578063ebebcab7146100ef5763ffd6b0f60361000e57610b30565b610a70565b610a3b565b610a18565b6109d1565b610983565b610944565b6108aa565b6106f0565b61061e565b6105ea565b6105cf565b610578565b61040e565b6103cc565b61039e565b610390565b61036f565b610189565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6040610186926020835251916020808201520190610149565b90565b346101b4575f3660031901126101b4576101b06101a4610b73565b6040519182918261016d565b0390f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b604081019081106001600160401b038211176101e757604052565b6101b8565b602081019081106001600160401b038211176101e757604052565b606081019081106001600160401b038211176101e757604052565b90601f801991011681019081106001600160401b038211176101e757604052565b6040519061025260c083610222565b565b6040519061025261010083610222565b60405190610252604083610222565b60405190610252602083610222565b6001600160401b0381116101e757601f01601f191660200190565b81601f820112156101b4576020813591016102b782610282565b926102c56040519485610222565b828452828201116101b457815f92602092838601378301015290565b91906040838203126101b457604051906102fa826101cc565b819380356001600160401b0381116101b4578261031891830161029d565b83526020810135916001600160401b0383116101b45760209261033b920161029d565b910152565b9060406003198301126101b45760043591602435906001600160401b0382116101b457610186916004016102e1565b346101b457602061038861038236610340565b90610e00565b604051908152f35b602061038861038236610340565b346101b45760203660031901126101b4576103ca600435604051906103c2826101ec565b5f82526119d1565b005b60203660031901126101b4576103ca6040516103e7816101ec565b6004358152346119d1565b6001600160a01b038116036101b457565b3590610252826103f2565b60403660031901126101b457600435610426816103f2565b6024356001600160401b0381116101b45761044590369060040161029d565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016308114908115610556575b5061054757813b1561050d576103ca916104c46104b67f00000000000000000000000000000000000000000000000000000000000000006115c0565b6104be611a6a565b90612474565b156104ff576104fa6104f36104e76104da6124be565b546001600160a01b031690565b6001600160a01b031690565b3314610ec5565b611a8e565b6104fa6104f36104e7611fe7565b60405162461bcd60e51b81526020600482015260126024820152712727aa2fa4a6a82622a6a2a72a20aa24a7a760711b6044820152606490fd5b63703e46dd60e11b5f5260045ffd5b5f51602061260f5f395f51905f52546001600160a01b0316141590505f61047a565b346101b4575f3660031901126101b4577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036105475760206040515f51602061260f5f395f51905f528152f35b346101b4575f3660031901126101b4576101b06101a4610e93565b346101b4575f3660031901126101b4575f51602061260f5f395f51905f52546040516001600160a01b039091168152602090f35b346101b4575f3660031901126101b4576106606001600160a01b03604061064436611ba0565b015151166001600160a01b036106586124be565b541614610ec5565b610668611610565b600a610672611c64565b910155005b801515036101b457565b91908260609103126101b45760405161069981610207565b604080829480358452602081013560208501520135916106b883610677565b0152565b919060c0838203126101b457602061033b604051926106da846101cc565b606084966106e88382610681565b865201610681565b346101b45760203660031901126101b4576004356001600160401b0381116101b45761016060031982360301126101b457610729610243565b61073582600401610403565b815260248201356001600160401b0381116101b45761075a90600436918501016102e1565b602082015260448201356001600160401b0381116101b45761078290600436918501016102e1565b604082015260648201356001600160401b0381116101b4576103ca926107b16107ca92600436918401016102e1565b60608401526084810135608084015260a43691016106bc565b60a0820152610eda565b9060206107ea8351604084526040840190610149565b928101516001600160a01b031691015290565b6101869160206108168351604084526040840190610149565b920151906020818403910152610149565b90610186916020815260e061086361084d845161010060208601526101208501906107d4565b6020850151848203601f190160408601526107d4565b926040810151606084015260608101516080840152608081015160a084015260a081015160c084015260c081015182840152015190610100601f19828503019101526107fd565b346101b4575f3660031901126101b4576108c26113d6565b506101b06108ce611610565b610933600760048301549260058101546006820154600983015490600a840154926108f7610254565b9761090186610c8d565b895261090f60028701610c8d565b60208a015260408901526060880152608087015260a086015260c085015201610d0a565b60e082015260405191829182610827565b5f3660031901126101b457602061038861097d610967610962611f00565b611f1a565b604051906109758583610222565b5f8252611fc6565b34610e00565b346101b45760403660031901126101b45760043560203660231901126101b4576040516103ca916109b3826101ec565b60243582526119d1565b604051906109cc602083610222565b5f8252565b346101b4575f3660031901126101b4576101b06040516109f2604082610222565b60058152640352e302e360dc1b6020820152604051918291602083526020830190610149565b5f3660031901126101b4576103ca604051610a32816101ec565b5f8152346119d1565b346101b45760203660031901126101b4576020610388600435610382610a62610962611f00565b604051906109758683610222565b60203660031901126101b4576004356001600160401b0381116101b4578060040190608060031982360301126101b4576001600160a01b03610ab0611fe7565b163303610afe575f610add8192610ad7610aca8680611434565b9190926044369101611466565b91611fff565b602081519101305af4610aee61149c565b9015610af657005b602081519101fd5b60405162461bcd60e51b815260206004820152600a6024820152691393d517d2d15493915360b21b6044820152606490fd5b60203660031901126101b4576004356001600160401b0381116101b45761038861097d60209236906004016102e1565b60405190610b6d826101ec565b60608252565b610b7b610b60565b50610ba57f00000000000000000000000000000000000000000000000000000000000000006115c0565b60405190610bb2826101ec565b815290565b90600182811c92168015610be5575b6020831014610bd157565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610bc6565b9060405191825f825492610c0284610bb7565b8084529360018116908115610c6b5750600114610c27575b5061025292500383610222565b90505f9291925260205f20905f915b818310610c4f575050906020610252928201015f610c1a565b6020919350806001915483858901015201910190918492610c36565b90506020925061025294915060ff191682840152151560051b8201015f610c1a565b90604051610c9a816101cc565b60208193610ca781610bef565b8352600101546001600160a01b0316910152565b634e487b7160e01b5f52601160045260245ffd5b906127108202918083046127101490151715610ce757565b610cbb565b8115610cf6570490565b634e487b7160e01b5f52601260045260245ffd5b90604051610d17816101cc565b60018193610d2481610bef565b8352019060405180925f90805490610d3b82610bb7565b8085529160018116908115610da35750600114610d64575b5050602092916106b8910384610222565b5f908152602081209092505b818310610d875750508101602001816106b8610d53565b6020919350806001915483858901015201910190918492610d70565b60ff191660208681019190915292151560051b850190920192508391506106b89050610d53565b9060248201809211610ce757565b9060018201809211610ce757565b91908201809211610ce757565b91908203918211610ce757565b90610e09611610565b90610e1c83610e1784610c8d565b611763565b600482015490818402918483041484151715610ce757610e5a612710610e6c930494610e4785610c8d565b90610e5460078701610d0a565b91611895565b83610e6760028501610c8d565b611895565b60058101908154838101809111610ce7576006925501805490828203918211610ce7575590565b610e9b610b60565b50610ba57f00000000000000000000000000000000000000000000000000000000000000006115c0565b15610ecc57565b6282b42960e81b5f5260045ffd5b5f51602061262f5f395f51905f5254906001600160401b03610f0b604084901c60ff1615936001600160401b031690565b1680159081610ffe575b6001149081610ff4575b159081610feb575b50610fdc57610f6a9082610f6160016001600160401b03195f51602061262f5f395f51905f525416175f51602061262f5f395f51905f5255565b610fb857611302565b610f7057565b5f51602061262f5f395f51905f52805460ff60401b19169055604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1565b5f51602061262f5f395f51905f52805460ff60401b1916600160401b179055611302565b63f92ee8a960e01b5f5260045ffd5b9050155f610f27565b303b159150610f1f565b839150610f15565b601f821161101357505050565b5f5260205f20906020601f840160051c8301931061104b575b601f0160051c01905b818110611040575050565b5f8155600101611035565b909150819061102c565b91909182519283516001600160401b0381116101e75761107f816110798554610bb7565b85611006565b6020601f82116001146110f7576001926110ba836110cb94602094610252999a5f926110ec575b50508160011b915f199060031b1c19161790565b85555b01516001600160a01b031690565b910180546001600160a01b0319166001600160a01b03909216919091179055565b015190505f806110a6565b601f1982169561110a855f5260205f2090565b965f5b8181106111535750836102529798602094600197946110cb9789951061113b575b505050811b0185556110bd565b01515f1960f88460031b161c191690555f808061112e565b8383015189556001909801976020938401930161110d565b91909182516001600160401b0381116101e7576111928161118c8454610bb7565b84611006565b6020601f82116001146111c55781906111c19394955f926110ec5750508160011b915f199060031b1c19161790565b9055565b601f198216906111d8845f5260205f2090565b915f5b818110611212575095836001959697106111fa575b505050811b019055565b01515f1960f88460031b161c191690555f80806111f0565b9192602060018192868b0151815501940192016111db565b91909182519283516001600160401b0381116101e75761124e816110798554610bb7565b6020601f821160011461129157916112858260209360019561025298995f926110ec5750508160011b915f199060031b1c19161790565b84555b0151910161116b565b601f198216956112a4855f5260205f2090565b965f5b8181106112ea575092610252969760019593869383602097106112d2575b505050811b018455611288565b01515f1960f88460031b161c191690555f80806112c5565b838301518955600190980197602093840193016112a7565b80516040516113339161132e906001600160a01b0316611321836101ec565b6001600160a01b03168252565b611c91565b600961139a60a0611342611610565b936113596113536020830151611d74565b86611055565b6113726113696040830151611d74565b60028701611055565b61138360608201516007870161122a565b608081015160048601555f60058601550151611e8e565b600a840155910155565b604051906113b1826101cc565b5f602083606081520152565b604051906113ca826101cc565b60606020838281520152565b6040519061010082018281106001600160401b038211176101e757604052816113fd6113a4565b81526114076113a4565b60208201525f60408201525f60608201525f60808201525f60a08201525f60c082015260e061033b6113bd565b903590601e19813603018212156101b457018035906001600160401b0382116101b4576020019181360383136101b457565b91908260409103126101b45760405161147e816101cc565b6020808294803561148e816103f2565b84520135916106b8836103f2565b3d156114c6573d906114ad82610282565b916114bb6040519384610222565b82523d5f602084013e565b606090565b90815f8237015f815290565b6114df61241a565b5f80356001600160e01b031916808252602092909252604090206001600160a01b0390541690811561158a575b506001600160a01b03811615611547575f80916040518061152d81366114cb565b03915af461153961149c565b9015610af657602081519101f35b60405162461bcd60e51b815260206004820152601b60248201527a111a585b5bdb990e88199d5b98dd1a5bdb881b9bdd08199bdd5b99602a1b6044820152606490fd5b6115b09150600161159961241a565b019063ffffffff60e01b165f5260205260405f2090565b546001600160a01b03165f61150c565b60ff811690601f82116115ef57604051916115dc604084610222565b6020808452838101919036833783525290565b632cd44ac360e21b5f5260045ffd5b805191908290602001825e015f815290565b60405161161e606082610222565b602c81527f616e64726f6d6564612e73746f726167652e65786368616e67652e657863686160208201526b1b99d94b58dbdb9d1c9858dd60a21b6040820152604051611680816116726020820180956115fe565b03601f198101835282610222565b5190205f198101908111610ce757604051906116b7826116a96020820193849190602083019252565b03601f198101845283610222565b9051902060ff191690565b156116c957565b60405162461bcd60e51b815260206004820152600f60248201526e0829a9eaa9ca8be9a92a69a82a8869608b1b6044820152606490fd5b908160209103126101b4575161018681610677565b6040513d5f823e3d90fd5b1561172757565b60405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606490fd5b60208101516001600160a01b031615611827576020908101516117d89290611793906001600160a01b03166104e7565b61179b611f00565b6040516323b872dd60e01b81526001600160a01b0390911660048201523060248201526044810192909252909283919082905f9082906064820190565b03925af1801561182257610252915f916117f3575b50611720565b611815915060203d60201161181b575b61180d8183610222565b810190611700565b5f6117ed565b503d611803565b611715565b506102529034146116c2565b1561183a57565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b610186939260609260018060a01b0316825260208201528160408201520190610149565b906118a0835161208c565b60208301519093906001600160a01b031615611996576020018051519092901561190557916117d893915f6118e56104e76104e760208098015160018060a01b031690565b9251604051630200057560e51b8152968795869485939160048501611871565b60209081015161195c94919350611926906104e7906001600160a01b031681565b60405163a9059cbb60e01b81526001600160a01b03909216600483015260248201929092529283919082905f9082906044820190565b03925af1801561182257610252915f91611977575b50611833565b611990915060203d60201161181b5761180d8183610222565b5f611971565b5f93908493506020906119aa8434146116c2565b01518051926020909101916001600160a01b03165af16119c861149c565b9015610af65750565b6119d9611610565b600a8101546119e6611c64565b1015611a3857600281610252946006610e17940190611a06868354610de6565b82558051611a17575b505001610c8d565b611a24611a2c9254610ccf565b905190610cec565b60048201555f80611a0f565b60405162461bcd60e51b815260206004820152600a60248201526914d0531157d15391115160b21b6044820152606490fd5b60405190611a79604083610222565b60068252651ad95c9b995b60d21b6020830152565b6040516352d1902d60e01b81529290916020846004816001600160a01b0387165afa5f9481611b0e575b50611ad957634c9c8ce360e01b5f526001600160a01b03831660045260245ffd5b90915f51602061260f5f395f51905f528403611afa576102529293506120a0565b632a87526960e21b5f52600484905260245ffd5b9094506020813d602011611b3a575b81611b2a60209383610222565b810103126101b45751935f611ab8565b3d9150611b1d565b60405190611b4f82610207565b815f81525f60208201526040805191611b67836101cc565b5f83525f60208401520152565b909392938483116101b45784116101b4578101920390565b906040828203126101b45761018691611466565b611ba8611b42565b50611bb1612142565b9060248110611c60576001600160a01b03611bdd6003611bcf6124be565b01546001600160a01b031690565b168015611c5b573303611c605763beb2afbd60e01b3660031901356001600160e01b03191601611c6057366023190135611c1681610dca565b8210611c5b57611c4f9181611c40611c39611c33611c4795610dca565b84610df3565b9182610de6565b915f611b74565b810190611b8c565b60018252604082015290565b505090565b5090565b6103e842024281046103e81442151715610ce75790565b611c8b90604051918280926115fe565b03902090565b60ff5f51602061262f5f395f51905f525460401c1615611d6557611d0360018060a01b038251166040519063a74e5ca560e01b6020830152602482015260248152611cdd604482610222565b7f00000000000000000000000000000000000000000000000000000000000000006124a1565b50611d0c610b73565b51611d33611d2d611d1b610e93565b5193516001600160a01b031692611c7b565b92611c7b565b6001600160a01b03909116917f542e3741e19b27af9739b3c2fe67ae9fececcd04a33dcb48e178f0f664e502f65f80a4565b631afcd79f60e31b5f5260045ffd5b611d7c6113a4565b5080515115801560208301918251511515908290611e87575b15611e525781611e4a575b50611e0557815151611def57611dc99150611dc1611dbc611fe7565b612165565b9051906122a7565b610186611dd4610264565b91611ddd6109bd565b83526001600160a01b03166020830152565b5051611df9610264565b9081525f602082015290565b60405162461bcd60e51b815260206004820152601f60248201527f43414e4e4f545f42455f424f54485f4e41544956455f414e445f534d415254006044820152606490fd5b90505f611da0565b60405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d054d4d155609a1b6044820152606490fd5b5080611d95565b90611eb2602092611ea88151611ea2611c64565b90612352565b9384910151612352565b9182811015611ebf579190565b60405162461bcd60e51b815260206004820152601960248201527853544152545f54494d455f41465445525f454e445f54494d4560381b6044820152606490fd5b6001600160a01b036040611f1336611ba0565b0151511690565b6001600160a01b031680611f2e602a61239a565b916030611f3a846123e0565b536078611f46846123ed565b53611f516028610dd8565b60018111611f795750611f62575090565b63e22e27eb60e01b5f52600452601460245260445ffd5b90600f81166010811015611fc157611fbc91611fb6916f181899199a1a9b1b9c1cb0b131b232b360811b901a611faf85886123fd565b5360041c90565b9161240e565b611f51565b6123cc565b90611fcf6113bd565b5060405191611fdd836101cc565b8252602082015290565b6001600160a01b036003611ff96124be565b01541690565b611672612055612073602461018695966040519060018060a01b038151166020830152602060018060a01b0391015116604082015260408152612043606082610222565b805160405194859260208401906115fe565b90815263414d504360e01b6020820152036004810184520182610222565b60208560405196879583870137840101905f82526115fe565b6101869061209b611dbc611fe7565b6122a7565b90813b15612121575f51602061260f5f395f51905f5280546001600160a01b0319166001600160a01b0384169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a280511561210957612106916124a1565b50565b50503461211257565b63b398979f60e01b5f5260045ffd5b50634c9c8ce360e01b5f9081526001600160a01b0391909116600452602490fd5b61214a611b42565b905f8252336020830152604082013381515260203391510152565b6040908151906121758383610222565b600382526276667360e81b60208301526001600160a01b03168015612253576121c192916020916121a4610273565b9182528351808096819463fd7687ef60e01b83526004830161016d565b03915afa918215611822575f92612222575b506001600160a01b038216156121e7575090565b5162461bcd60e51b8152602060048201526015602482015274159194c81859191c995cdcc81b9bdd08199bdd5b99605a1b6044820152606490fd5b61224591925060203d60201161224c575b61223d8183610222565b810190612292565b905f6121d3565b503d612233565b825162461bcd60e51b815260206004820152601860248201527712d95c9b995b081859191c995cdcc81b9bdd08199bdd5b9960421b6044820152606490fd5b908160209103126101b45751610186816103f2565b6122cf91602091604051808095819463c92557a760e01b835286600484018181520190610149565b03916001600160a01b03165afa908115611822575f91612333575b506001600160a01b038116156122fd5790565b60405162461bcd60e51b815260206004820152600e60248201526d14105512081393d5081193d5539160921b6044820152606490fd5b61234c915060203d60201161224c5761223d8183610222565b5f6122ea565b8161235c91612515565b9081106123665790565b60405162461bcd60e51b815260206004820152600c60248201526b1512535157d156141254915160a21b6044820152606490fd5b906123a482610282565b6123b16040519182610222565b82815280926123c2601f1991610282565b0190602036910137565b634e487b7160e01b5f52603260045260245ffd5b805115611fc15760200190565b805160011015611fc15760210190565b908151811015611fc1570160200190565b8015610ce7575f190190565b604051612428606082610222565b602481527f616e64726f6d6564612e73746f726167652e7374642e6d73672e7369676e61746020820152637572657360e01b6040820152604051611680816116726020820180956115fe565b908151815190818114938461248b575b5050505090565b602092939450820120920120145f808080612484565b5f8061018693602081519101845af46124b861149c565b916125b0565b6040516124cc606082610222565b602181527f616e64726f6d6564612e73746f726167652e7374642e61646f2e64656661756c6020820152601d60fa1b6040820152604051611680816116726020820180956115fe565b9060408201516125a957815115158061259c575b61254b57602082019182511561253f5750505190565b61018692505190610de6565b60405162461bcd60e51b815260206004820152602360248201527f43414e4e4f545f42455f424f54485f46524f4d5f4e4f575f414e445f41545f54604482015262494d4560e81b6064820152608490fd5b5060208201511515612529565b50505f1990565b906125d457508051156125c557602081519101fd5b63d6bda27560e01b5f5260045ffd5b81511580612605575b6125e5575090565b639996b31560e01b5f9081526001600160a01b0391909116600452602490fd5b50803b156125dd56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a2646970667358221220a51057284f7cd41e4932ad9c3ddc2113876d35a7b3410a2e3e881f9f6b37f9ad64736f6c634300081e0033f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00";

type ExchangeContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeContract__factory extends ContractFactory {
  constructor(...args: ExchangeContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    libraryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(libraryAddress, overrides || {});
  }
  override deploy(
    libraryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(libraryAddress, overrides || {}) as Promise<
      ExchangeContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ExchangeContract__factory {
    return super.connect(runner) as ExchangeContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeContractInterface {
    return new Interface(_abi) as ExchangeContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ExchangeContract {
    return new Contract(address, _abi, runner) as unknown as ExchangeContract;
  }
}
