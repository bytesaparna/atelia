/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Cw20Contract, Cw20ContractInterface } from "../Cw20Contract";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "libraryAddress",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "UPGRADE_INTERFACE_VERSION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ado_type",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IContractBase.AdoTypeResponse",
        components: [
          {
            name: "ado_type",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "allowance",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ampReceive",
    inputs: [
      {
        name: "packet",
        type: "tuple",
        internalType: "struct AmpMsgLib.AmpPkt",
        components: [
          {
            name: "message",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "funds",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "ctx",
            type: "tuple",
            internalType: "struct AmpMsgLib.AmpPktCtx",
            components: [
              {
                name: "origin",
                type: "address",
                internalType: "address",
              },
              {
                name: "previous_sender",
                type: "address",
                internalType: "address",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "spender",
        type: "string",
        internalType: "string",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "approveAndCall",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "approveAndCall",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "cap",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "implementation",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "params",
        type: "tuple",
        internalType: "struct ICw20Contract.Cw20ContractInitParams",
        components: [
          {
            name: "owner",
            type: "address",
            internalType: "address",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "symbol",
            type: "string",
            internalType: "string",
          },
          {
            name: "decimals",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "minter",
            type: "tuple",
            internalType: "struct ICw20Contract.Minter",
            components: [
              {
                name: "minter",
                type: "string",
                internalType: "string",
              },
              {
                name: "cap",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
          {
            name: "initialBalances",
            type: "tuple[]",
            internalType: "struct ICw20Contract.InitialBalance[]",
            components: [
              {
                name: "account",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "mint",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "minter",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transfer",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferAndCall",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferAndCall",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferFromAndCall",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferFromAndCall",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgradeToAndCall",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IContractBase.VersionResponse",
        components: [
          {
            name: "version",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "AdoDefaultInitialized",
    inputs: [
      {
        name: "adoType",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "version",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "adoOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1363ApproveFailed",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1363InvalidReceiver",
    inputs: [
      {
        name: "receiver",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1363InvalidSpender",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1363TransferFailed",
    inputs: [
      {
        name: "receiver",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1363TransferFromFailed",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: [],
  },
  {
    type: "error",
    name: "ERC20ExceededCap",
    inputs: [
      {
        name: "increasedSupply",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "cap",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InsufficientAllowance",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "allowance",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "needed",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InsufficientBalance",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
      {
        name: "balance",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "needed",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InvalidApprover",
    inputs: [
      {
        name: "approver",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InvalidCap",
    inputs: [
      {
        name: "cap",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InvalidReceiver",
    inputs: [
      {
        name: "receiver",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InvalidSender",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InvalidSpender",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidShortString",
    inputs: [],
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: [],
  },
  {
    type: "error",
    name: "StringTooLong",
    inputs: [
      {
        name: "str",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "UUPSUnauthorizedCallContext",
    inputs: [],
  },
  {
    type: "error",
    name: "UUPSUnsupportedProxiableUUID",
    inputs: [
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "Unauthorized",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x61012080604052346102655761002b90612a5b80380380916100218285610269565b83398101906102a0565b604051610039604082610269565b60048152630637732360e41b602082015260405190610059604083610269565b60058252640302e312e360dc1b6020830152306080526040519061007e606083610269565b602182527f616e64726f6d6564612e73746f726167652e7374642e61646f2e64656661756c6020830152601d60fa1b604083015260206100fd604051936100c6604086610269565b60058552640302e302e360dc1b8386015261010f60405195869384936327a0d66960e01b85526040600486015260448501906102bf565b838103600319016024850152906102bf565b03816001600160a01b0388165afa93841561025a576101479461013f935f9161022b575b5060a05260c0526102e3565b60e0526102e3565b610100525f516020612a3b5f395f51905f525460ff8160401c1661021c576002600160401b03196001600160401b038216016101c6575b6040516127039081610338823960805181818161096d0152610aa8015260a051816117ce015260c05181505060e0518181816109b00152610ef4015261010051816112ea0152f35b6001600160401b0319166001600160401b039081175f516020612a3b5f395f51905f52556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f61017e565b63f92ee8a960e01b5f5260045ffd5b61024d915060203d602011610253575b6102458183610269565b8101906102a0565b5f610133565b503d61023b565b6040513d5f823e3d90fd5b5f80fd5b601f909101601f19168101906001600160401b0382119082101761028c57604052565b634e487b7160e01b5f52604160045260245ffd5b9081602091031261026557516001600160a01b03811681036102655790565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b601f81511161030e5760208151910151602082106102ff571790565b5f198260200360031b1b161790565b60405163305a27a960e01b8152602060048201529081906103339060248301906102bf565b0390fdfe60806040526004361015610015575b3661158d57005b5f3560e01c806301ffc9a7146101d4578063045ffa79146101cf57806306fdde03146101ca57806307546172146101c5578063095ea7b3146101c05780631296ee62146101bb57806318160ddd146101b657806323b872dd146101b157806323d6b52e146101ac578063313ce567146101a75780633177029f146101a2578063355274ea1461019d5780634000aea01461019857806340c10f19146101935780634f1ef2861461018e57806352d1902d1461018957806354fd4d50146101845780635c60da1b1461017f57806370a082311461017a57806395d89b4114610175578063a9059cbb14610170578063ad3cb1cc1461016b578063c1d34b8914610166578063cae9ca5114610161578063d8fbe9941461015c578063dd62ed3e14610157578063ebebcab7146101525763ff294f450361000e57610e7c565b610dbc565b610d67565b610d3d565b610d24565b610ccb565b610c84565b610c53565b610b96565b610b3c565b610b08565b610aed565b610a96565b61092c565b61089f565b610886565b610822565b6107e7565b6107c1565b6106c0565b6104d2565b61047d565b610438565b6103fc565b6103af565b6102c1565b610285565b6101ef565b6001600160e01b03198116036101eb57565b5f80fd5b346101eb5760203660031901126101eb57602060043561020e816101d9565b63ffffffff60e01b1663b0202a1160e01b8114908115610234575b506040519015158152f35b6301ffc9a760e01b1490505f610229565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6040610282926020835251916020808201520190610245565b90565b346101eb575f3660031901126101eb576102ac6102a0610ee6565b60405191829182610269565b0390f35b906020610282928181520190610245565b346101eb575f3660031901126101eb576040515f5f51602061262e5f395f51905f52546102ed81610f2a565b808452906001811690811561038b5750600114610321575b6102ac836103158185038261053a565b604051918291826102b0565b5f51602061262e5f395f51905f525f9081527f2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab0939250905b80821061037157509091508101602001610315610305565b919260018160209254838588010152019101909291610359565b60ff191660208086019190915291151560051b840190910191506103159050610305565b346101eb575f3660031901126101eb5760206001600160a01b036103d16119f1565b5460081c16604051908152f35b6001600160a01b038116036101eb57565b35906103fa826103de565b565b346101eb5760403660031901126101eb5761042d60043561041c816103de565b6024359061042861218e565b6121a8565b602060405160018152f35b346101eb5760403660031901126101eb57602061047360043561045a816103de565b6024356040519161046b858461053a565b5f83526112b3565b6040519015158152f35b346101eb575f3660031901126101eb5760205f51602061266e5f395f51905f5254604051908152f35b60609060031901126101eb576004356104be816103de565b906024356104cb816103de565b9060443590565b346101eb5760206104736104e5366104a6565b91610f62565b634e487b7160e01b5f52604160045260245ffd5b604081019081106001600160401b0382111761051a57604052565b6104eb565b602081019081106001600160401b0382111761051a57604052565b90601f801991011681019081106001600160401b0382111761051a57604052565b604051906103fa60c08361053a565b604051906103fa60208361053a565b6001600160401b03811161051a57601f01601f191660200190565b81601f820112156101eb576020813591016105ae82610579565b926105bc604051948561053a565b828452828201116101eb57815f92602092838601378301015290565b359060ff821682036101eb57565b9190916040818403126101eb5760405190610600826104ff565b81938135916001600160401b0383116101eb576106236020939284938301610594565b84520135910152565b81601f820112156101eb578035906001600160401b03821161051a576040519261065c60208460051b018561053a565b82845260208085019360061b830101918183116101eb57602001925b828410610686575050505090565b6040848303126101eb57602060409182516106a0816104ff565b86356106ab816103de565b81528287013583820152815201930192610678565b346101eb5760203660031901126101eb576004356001600160401b0381116101eb5760c060031982360301126101eb576106f861055b565b610704826004016103ef565b815260248201356001600160401b0381116101eb576107299060043691850101610594565b602082015260448201356001600160401b0381116101eb576107519060043691850101610594565b6040820152610762606483016105d8565b606082015260848201356001600160401b0381116101eb5761078a90600436918501016105e6565b608082015260a48201356001600160401b0381116101eb576107bf9260046107b5923692010161062c565b60a0820152611023565b005b346101eb575f3660031901126101eb57602060ff6107dd6119f1565b5416604051908152f35b346101eb5760403660031901126101eb576020610473600435610809816103de565b6024356040519161081a858461053a565b5f83526113d0565b346101eb575f3660031901126101eb5760205f51602061260e5f395f51905f5254604051908152f35b60606003198201126101eb57600435610863816103de565b9160243591604435906001600160401b0382116101eb5761028291600401610594565b346101eb5760206104736108993661084b565b916112b3565b346101eb5760403660031901126101eb576004356108bc816103de565b6024356108c836611f2c565b6001600160a01b036108d86119f1565b5460081c1690604060018060a01b039101515116036108fa576107bf91611cbf565b60405162461bcd60e51b815260206004820152600a6024820152692727aa2fa6a4a72a22a960b11b6044820152606490fd5b60403660031901126101eb57600435610944816103de565b6024356001600160401b0381116101eb57610963903690600401610594565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016308114908115610a74575b50610a6557813b15610a2b576107bf916109e26109d47f0000000000000000000000000000000000000000000000000000000000000000611676565b6109dc611ff0565b90612582565b15610a1d57610a18610a11610a056109f861252b565b546001600160a01b031690565b6001600160a01b031690565b3314612014565b612029565b610a18610a11610a05611aaa565b60405162461bcd60e51b81526020600482015260126024820152712727aa2fa4a6a82622a6a2a72a20aa24a7a760711b6044820152606490fd5b63703e46dd60e11b5f5260045ffd5b5f51602061268e5f395f51905f52546001600160a01b0316141590505f610998565b346101eb575f3660031901126101eb577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610a655760206040515f51602061268e5f395f51905f528152f35b346101eb575f3660031901126101eb576102ac6102a06112dc565b346101eb575f3660031901126101eb575f51602061268e5f395f51905f52546040516001600160a01b039091168152602090f35b346101eb5760203660031901126101eb57600435610b59816103de565b60018060a01b03165f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00602052602060405f2054604051908152f35b346101eb575f3660031901126101eb576040515f5f51602061264e5f395f51905f5254610bc281610f2a565b808452906001811690811561038b5750600114610be9576102ac836103158185038261053a565b5f51602061264e5f395f51905f525f9081527f46a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa939250905b808210610c3957509091508101602001610315610305565b919260018160209254838588010152019101909291610c21565b346101eb5760403660031901126101eb5761042d600435610c73816103de565b60243590610c7f61218e565b6116b4565b346101eb575f3660031901126101eb576102ac604051610ca560408261053a565b60058152640352e302e360dc1b6020820152604051918291602083526020830190610245565b346101eb5760803660031901126101eb57600435610ce8816103de565b60243590610cf5826103de565b606435906044356001600160401b0383116101eb57602093610d1e610473943690600401610594565b9261137e565b346101eb576020610473610d373661084b565b916113d0565b346101eb576020610473610d50366104a6565b9060405192610d5f868561053a565b5f845261137e565b346101eb5760403660031901126101eb576020610db3600435610d89816103de565b610d9e60243591610d99836103de565b61130e565b9060018060a01b03165f5260205260405f2090565b54604051908152f35b60203660031901126101eb576004356001600160401b0381116101eb578060040190608060031982360301126101eb576001600160a01b03610dfc611aaa565b163303610e4a575f610e298192610e23610e1686806114e6565b9190926044369101611518565b91612101565b602081519101305af4610e3a611552565b9015610e4257005b602081519101fd5b60405162461bcd60e51b815260206004820152600a6024820152691393d517d2d15493915360b21b6044820152606490fd5b346101eb5760403660031901126101eb576004356001600160401b0381116101eb57610eaf61042d913690600401610594565b610ecb60243591610ec6610ec1611aaa565b611ac2565b611c14565b61042861218e565b60405190610ee08261051f565b60608252565b610eee610ed3565b50610f187f0000000000000000000000000000000000000000000000000000000000000000611676565b60405190610f258261051f565b815290565b90600182811c92168015610f58575b6020831014610f4457565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610f39565b9190610f6c61218e565b92610f7a84610d9e8361130e565b54935f198510610f95575b50610f9093506116b4565b600190565b838510610ffa576001600160a01b03821615610fe7576001600160a01b03811615610fd457610fcd84610f90960391610d9e8461130e565b555f610f85565b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b637dc7a0d960e11b5f9081526001600160a01b0390911660045260248590526044849052606490fd5b5f5160206126ae5f395f51905f5254906001600160401b03611054604084901c60ff1615936001600160401b031690565b1680159081611147575b600114908161113d575b159081611134575b50611125576110b390826110aa60016001600160401b03195f5160206126ae5f395f51905f525416175f5160206126ae5f395f51905f5255565b61110157611177565b6110b957565b5f5160206126ae5f395f51905f52805460ff60401b19169055604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1565b5f5160206126ae5f395f51905f52805460ff60401b1916600160401b179055611177565b63f92ee8a960e01b5f5260045ffd5b9050155f611070565b303b159150611068565b83915061105e565b80518210156111635760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b80516111a5906001600160a01b03166111a061119161056a565b6001600160a01b039092168252565b611792565b6111b8602082015160408301519061185e565b6080810160208151015180156112ab575b6111d290611991565b6111da612206565b6111e26119f1565b6112036111f3606085015160ff1690565b825460ff191660ff909116178255565b81515151611267575b50505f5b60a0820180519182518110156112615761125960019260206112508461124961123b8260a09a61114f565b51516001600160a01b031690565b935161114f565b51015190611cbf565b019050611210565b50505050565b6112826112a492611279610ec1611aaa565b90515190611c14565b8154610100600160a81b03191660089190911b610100600160a81b0316179055565b5f8061120c565b505f196111c9565b90610f9092916112c68282610c7f61218e565b6112ce61218e565b6112d661218e565b90611dba565b6112e4610ed3565b50610f187f0000000000000000000000000000000000000000000000000000000000000000611676565b6001600160a01b03165f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020526040902090565b6001600160a01b03165f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace006020526040902090565b9392919061138d828287610f62565b156113a457610f90939461139f61218e565b611dba565b635ab42af360e11b5f9081526001600160a01b0380871660045291909116602452604491909152606490fd5b91906113df818461042861218e565b6113e761218e565b833b156114ca579060209161141060405194859384936307b04a2d60e41b8552600485016120dd565b03815f6001600160a01b0387165af15f9181611499575b506114615750611435611552565b805191908261145a5763deb6d3ed60e01b5f526001600160a01b03821660045260245ffd5b6020915001fd5b6001600160e01b03191663084fb5d360e41b0161147e5750600190565b63deb6d3ed60e01b5f526001600160a01b031660045260245ffd5b6114bc91925060203d6020116114c3575b6114b4818361053a565b810190611d74565b905f611427565b503d6114aa565b63deb6d3ed60e01b5f526001600160a01b03841660045260245ffd5b903590601e19813603018212156101eb57018035906001600160401b0382116101eb576020019181360383136101eb57565b91908260409103126101eb57604051611530816104ff565b60208082948035611540816103de565b845201359161154e836103de565b0152565b3d1561157c573d9061156382610579565b91611571604051938461053a565b82523d5f602084013e565b606090565b90815f8237015f815290565b6115956124b4565b5f80356001600160e01b031916808252602092909252604090206001600160a01b03905416908115611640575b506001600160a01b038116156115fd575f8091604051806115e38136611581565b03915af46115ef611552565b9015610e4257602081519101f35b60405162461bcd60e51b815260206004820152601b60248201527a111a585b5bdb990e88199d5b98dd1a5bdb881b9bdd08199bdd5b99602a1b6044820152606490fd5b6116669150600161164f6124b4565b019063ffffffff60e01b165f5260205260405f2090565b546001600160a01b03165f6115c2565b60ff811690601f82116116a5576040519161169260408461053a565b6020808452838101919036833783525290565b632cd44ac360e21b5f5260045ffd5b916001600160a01b03831691821561176d576001600160a01b03811693841561175a576116e081611346565b5483811061173f5761173a92849261171e7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef96611724940391611346565b55611346565b8054820190556040519081529081906020820190565b0390a3565b83908563391434e360e21b5f5260045260245260445260645ffd5b63ec442f0560e01b5f525f60045260245ffd5b634b637e8f60e11b5f525f60045260245ffd5b805191908290602001825e015f815290565b61179a612206565b6117f260018060a01b038251166040519063a74e5ca560e01b60208301526024820152602481526117cc60448261053a565b7f000000000000000000000000000000000000000000000000000000000000000061250e565b506117fb610ee6565b519061183461182461180b6112dc565b519260018060a01b039051169360405191828092611780565b0390209160405191828092611780565b039020907f542e3741e19b27af9739b3c2fe67ae9fececcd04a33dcb48e178f0f664e502f65f80a4565b611866612206565b61186e612206565b8051906001600160401b03821161051a5761189f8261189a5f51602061262e5f395f51905f5254610f2a565b612231565b602090601f83116001146118f25791806118d3926103fa95945f926118e7575b50508160011b915f199060031b1c19161790565b5f51602061262e5f395f51905f52556122dc565b015190505f806118bf565b5f51602061262e5f395f51905f525f52601f19831691907f2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab0925f5b81811061197957509160019391856103fa97969410611961575b505050811b015f51602061262e5f395f51905f52556122dc565b01515f1960f88460031b161c191690555f8080611947565b9293602060018192878601518155019501930161192d565b611999612206565b6119a1612206565b80156119b8575f51602061260e5f395f51905f5255565b63392e1e2760e01b5f525f60045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b919082039182116119ec57565b6119cb565b6040516119ff60608261053a565b603381527f616e64726f6d6564612e73746f726167652e66756e6769626c652d746f6b656e6020820152720b98ddcc8c0b98ddcc8c0b58dbdb9d1c9858dd606a1b6040820152604051611a6881611a5a602082018095611780565b03601f19810183528261053a565b5190205f1981019081116119ec5760405190611a9f82611a916020820193849190602083019252565b03601f19810184528361053a565b9051902060ff191690565b6001600160a01b036003611abc61252b565b01541690565b604090815190611ad2838361053a565b600382526276667360e81b60208301526001600160a01b03168015611bb557611b1e9291602091611b0161056a565b9182528351808096819463fd7687ef60e01b835260048301610269565b03915afa918215611bb0575f92611b7f575b506001600160a01b03821615611b44575090565b5162461bcd60e51b8152602060048201526015602482015274159194c81859191c995cdcc81b9bdd08199bdd5b99605a1b6044820152606490fd5b611ba291925060203d602011611ba9575b611b9a818361053a565b810190611bf4565b905f611b30565b503d611b90565b611c09565b825162461bcd60e51b815260206004820152601860248201527712d95c9b995b081859191c995cdcc81b9bdd08199bdd5b9960421b6044820152606490fd5b908160209103126101eb5751610282816103de565b6040513d5f823e3d90fd5b611c3c91602091604051808095819463c92557a760e01b835286600484018181520190610245565b03916001600160a01b03165afa908115611bb0575f91611ca0575b506001600160a01b03811615611c6a5790565b60405162461bcd60e51b815260206004820152600e60248201526d14105512081393d5081193d5539160921b6044820152606490fd5b611cb9915060203d602011611ba957611b9a818361053a565b5f611c57565b6001600160a01b0381169190821561175a575f51602061266e5f395f51905f5254918083018093116119ec57611d267fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef925f945f51602061266e5f395f51905f5255611346565b805482019055604051908152602090a35f51602061260e5f395f51905f52545f51602061266e5f395f51905f5254818111611d5f575050565b63279e7e1560e21b5f5260045260245260445ffd5b908160209103126101eb5751610282816101d9565b6001600160a01b03918216815291166020820152604081019190915260806060820181905261028292910190610245565b909193843b15611e875790611de7602093926040519586948594632229f29760e21b865260048601611d89565b03815f6001600160a01b0387165af15f9181611e66575b50611e315750611e0c611552565b805191908261145a576322a5b36760e21b5f526001600160a01b03821660045260245ffd5b6001600160e01b031916631dd60d6960e21b01611e4b5750565b6322a5b36760e21b5f526001600160a01b031660045260245ffd5b611e8091925060203d6020116114c3576114b4818361053a565b905f611dfe565b6322a5b36760e21b5f526001600160a01b03851660045260245ffd5b60405190606082018281106001600160401b0382111761051a57604052815f81525f60208201526040805191611ed8836104ff565b5f83525f60208401520152565b90602482018092116119ec57565b919082018092116119ec57565b909392938483116101eb5784116101eb578101920390565b906040828203126101eb5761028291611518565b611f34611ea3565b50611f3d6123ef565b9060248110611fec576001600160a01b03611f696003611f5b61252b565b01546001600160a01b031690565b168015611fe7573303611fec5763beb2afbd60e01b3660031901356001600160e01b03191601611fec57366023190135611fa281611ee5565b8210611fe757611fdb9181611fcc611fc5611fbf611fd395611ee5565b846119df565b9182611ef3565b915f611f00565b810190611f18565b60018252604082015290565b505090565b5090565b60405190611fff60408361053a565b60068252651ad95c9b995b60d21b6020830152565b1561201b57565b6282b42960e81b5f5260045ffd5b6040516352d1902d60e01b81529290916020846004816001600160a01b0387165afa5f94816120a9575b5061207457634c9c8ce360e01b5f526001600160a01b03831660045260245ffd5b90915f51602061268e5f395f51905f528403612095576103fa929350612412565b632a87526960e21b5f52600484905260245ffd5b9094506020813d6020116120d5575b816120c56020938361053a565b810103126101eb5751935f612053565b3d91506120b8565b610282939260609260018060a01b0316825260208201528160408201520190610245565b611a5a612157612175602461028295966040519060018060a01b038151166020830152602060018060a01b039101511660408201526040815261214560608261053a565b80516040519485926020840190611780565b90815263414d504360e01b602082015203600481018452018261053a565b60208560405196879583870137840101905f8252611780565b6001600160a01b0360406121a136611f2c565b0151511690565b6001600160a01b03811691908215610fe7576001600160a01b038216938415610fd457806121fc7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92594610d9e60209561130e565b55604051908152a3565b60ff5f5160206126ae5f395f51905f525460401c161561222257565b631afcd79f60e31b5f5260045ffd5b601f811161223d575050565b5f51602061262e5f395f51905f525f5260205f20906020601f840160051c83019310612283575b601f0160051c01905b818110612278575050565b5f815560010161226d565b9091508190612264565b601f821161229a57505050565b5f5260205f20906020601f840160051c830193106122d2575b601f0160051c01905b8181106122c7575050565b5f81556001016122bc565b90915081906122b3565b9081516001600160401b03811161051a5761231b816123085f51602061264e5f395f51905f5254610f2a565b5f51602061264e5f395f51905f5261228d565b602092601f821160011461235b5761234a929382915f926118e75750508160011b915f199060031b1c19161790565b5f51602061264e5f395f51905f5255565b5f51602061264e5f395f51905f525f52601f198216937f46a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa915f5b8681106123d757508360019596106123bf575b505050811b015f51602061264e5f395f51905f5255565b01515f1960f88460031b161c191690555f80806123a8565b91926020600181928685015181550194019201612395565b6123f7611ea3565b905f8252336020830152604082013381515260203391510152565b90813b15612493575f51602061268e5f395f51905f5280546001600160a01b0319166001600160a01b0384169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a280511561247b576124789161250e565b50565b50503461248457565b63b398979f60e01b5f5260045ffd5b50634c9c8ce360e01b5f9081526001600160a01b0391909116600452602490fd5b6040516124c260608261053a565b602481527f616e64726f6d6564612e73746f726167652e7374642e6d73672e7369676e61746020820152637572657360e01b6040820152604051611a6881611a5a602082018095611780565b5f8061028293602081519101845af4612525611552565b916125af565b60405161253960608261053a565b602181527f616e64726f6d6564612e73746f726167652e7374642e61646f2e64656661756c6020820152601d60fa1b6040820152604051611a6881611a5a602082018095611780565b9081518151908181149384612599575b5050505090565b602092939450820120920120145f808080612592565b906125d357508051156125c457602081519101fd5b63d6bda27560e01b5f5260045ffd5b81511580612604575b6125e4575090565b639996b31560e01b5f9081526001600160a01b0391909116600452602490fd5b50803b156125dc56fe0f070392f17d5f958cc1ac31867dabecfc5c9758b4a419a200803226d7155d0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0352c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0452c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a2646970667358221220a6a003db7b38b6b30b4cd7922ba09655f1e82710f758ad1d9bc2a6d2975c335464736f6c634300081e0033f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00";

type Cw20ContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Cw20ContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cw20Contract__factory extends ContractFactory {
  constructor(...args: Cw20ContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    libraryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(libraryAddress, overrides || {});
  }
  override deploy(
    libraryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(libraryAddress, overrides || {}) as Promise<
      Cw20Contract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Cw20Contract__factory {
    return super.connect(runner) as Cw20Contract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Cw20ContractInterface {
    return new Interface(_abi) as Cw20ContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Cw20Contract {
    return new Contract(address, _abi, runner) as unknown as Cw20Contract;
  }
}
