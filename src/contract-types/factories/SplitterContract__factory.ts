/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  SplitterContract,
  SplitterContractInterface,
} from "../SplitterContract";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "libraryAddress",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "UPGRADE_INTERFACE_VERSION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ado_type",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IContractBase.AdoTypeResponse",
        components: [
          {
            name: "ado_type",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ampReceive",
    inputs: [
      {
        name: "packet",
        type: "tuple",
        internalType: "struct AmpMsgLib.AmpPkt",
        components: [
          {
            name: "message",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "funds",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "ctx",
            type: "tuple",
            internalType: "struct AmpMsgLib.AmpPktCtx",
            components: [
              {
                name: "origin",
                type: "address",
                internalType: "address",
              },
              {
                name: "previous_sender",
                type: "address",
                internalType: "address",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "implementation",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "params",
        type: "tuple",
        internalType: "struct ISplitterContract.SplitterContractInitParams",
        components: [
          {
            name: "owner",
            type: "address",
            internalType: "address",
          },
          {
            name: "default_recipient",
            type: "tuple",
            internalType: "struct RecipientLib.Recipient",
            components: [
              {
                name: "recipient",
                type: "string",
                internalType: "string",
              },
              {
                name: "message",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
          {
            name: "config",
            type: "tuple[]",
            internalType: "struct SplitterContractStorage.SplitterConfig[]",
            components: [
              {
                name: "recipient",
                type: "tuple",
                internalType: "struct RecipientLib.Recipient",
                components: [
                  {
                    name: "recipient",
                    type: "string",
                    internalType: "string",
                  },
                  {
                    name: "message",
                    type: "bytes",
                    internalType: "bytes",
                  },
                ],
              },
              {
                name: "split_bps",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "send",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "asset",
        type: "tuple",
        internalType: "struct AssetLib.Asset",
        components: [
          {
            name: "native",
            type: "string",
            internalType: "string",
          },
          {
            name: "smart",
            type: "string",
            internalType: "string",
          },
        ],
      },
      {
        name: "config",
        type: "tuple[]",
        internalType: "struct SplitterContractStorage.SplitterConfig[]",
        components: [
          {
            name: "recipient",
            type: "tuple",
            internalType: "struct RecipientLib.Recipient",
            components: [
              {
                name: "recipient",
                type: "string",
                internalType: "string",
              },
              {
                name: "message",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
          {
            name: "split_bps",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "send",
    inputs: [
      {
        name: "config",
        type: "tuple[]",
        internalType: "struct SplitterContractStorage.SplitterConfig[]",
        components: [
          {
            name: "recipient",
            type: "tuple",
            internalType: "struct RecipientLib.Recipient",
            components: [
              {
                name: "recipient",
                type: "string",
                internalType: "string",
              },
              {
                name: "message",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
          {
            name: "split_bps",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "upgradeToAndCall",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IContractBase.VersionResponse",
        components: [
          {
            name: "version",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "AdoDefaultInitialized",
    inputs: [
      {
        name: "adoType",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "version",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "adoOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: [],
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidShortString",
    inputs: [],
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: [],
  },
  {
    type: "error",
    name: "StringTooLong",
    inputs: [
      {
        name: "str",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "UUPSUnauthorizedCallContext",
    inputs: [],
  },
  {
    type: "error",
    name: "UUPSUnsupportedProxiableUUID",
    inputs: [
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "Unauthorized",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x61012080604052346102695761002b906123ca8038038091610021828561026d565b83398101906102a4565b60405161003960408261026d565b600881526739b83634ba3a32b960c11b60208201526040519061005d60408361026d565b60058252640302e312e360dc1b6020830152306080526040519061008260608361026d565b602182527f616e64726f6d6564612e73746f726167652e7374642e61646f2e64656661756c6020830152601d60fa1b60408301526020610101604051936100ca60408661026d565b60058552640302e302e360dc1b8386015261011360405195869384936327a0d66960e01b85526040600486015260448501906102c3565b838103600319016024850152906102c3565b03816001600160a01b0388165afa93841561025e5761014b94610143935f9161022f575b5060a05260c0526102e7565b60e0526102e7565b610100525f5160206123aa5f395f51905f525460ff8160401c16610220576002600160401b03196001600160401b038216016101ca575b60405161206e908161033c823960805181818161028c01526103c7015260a05181610f20015260c05181505060e0518181816102cf0152610870015261010051816108b40152f35b6001600160401b0319166001600160401b039081175f5160206123aa5f395f51905f52556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f610182565b63f92ee8a960e01b5f5260045ffd5b610251915060203d602011610257575b610249818361026d565b8101906102a4565b5f610137565b503d61023f565b6040513d5f823e3d90fd5b5f80fd5b601f909101601f19168101906001600160401b0382119082101761029057604052565b634e487b7160e01b5f52604160045260245ffd5b9081602091031261026957516001600160a01b03811681036102695790565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b601f815111610312576020815191015160208210610303571790565b5f198260200360031b1b161790565b60405163305a27a960e01b8152602060048201529081906103379060248301906102c3565b0390fdfe6080604052600436101561001d575b366111395761001b6110b1565b005b5f3560e01c8063045ffa79146100bc5780634f1ef286146100b757806352d1902d146100b257806354fd4d50146100ad5780635c60da1b146100a85780637f8497ba146100a3578063ad3cb1cc1461009e578063af68420d14610099578063b2a13cc5146100945763ebebcab70361000e5761078f565b61073f565b610689565b610642565b61058a565b610427565b61040c565b6103b5565b61024b565b610101565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b60406100fe9260208352519160208082015201906100c1565b90565b3461012c575f36600319011261012c5761012861011c610862565b604051918291826100e5565b0390f35b5f80fd5b6001600160a01b0381160361012c57565b634e487b7160e01b5f52604160045260245ffd5b604081019081106001600160401b0382111761017057604052565b610141565b606081019081106001600160401b0382111761017057604052565b602081019081106001600160401b0382111761017057604052565b90601f801991011681019081106001600160401b0382111761017057604052565b604051906101db6040836101ab565b565b604051906101db6020836101ab565b6001600160401b03811161017057601f01601f191660200190565b81601f8201121561012c57602081359101610221826101ec565b9261022f60405194856101ab565b8284528282011161012c57815f92602092838601378301015290565b604036600319011261012c5760043561026381610130565b6024356001600160401b03811161012c57610282903690600401610207565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016308114908115610393575b5061038457813b1561034a5761001b916103016102f37f0000000000000000000000000000000000000000000000000000000000000000611222565b6102fb611260565b90611ee5565b1561033c57610337610330610324610317611f43565b546001600160a01b031690565b6001600160a01b031690565b3314611284565b6112a4565b610337610330610324611928565b60405162461bcd60e51b81526020600482015260126024820152712727aa2fa4a6a82622a6a2a72a20aa24a7a760711b6044820152606490fd5b63703e46dd60e11b5f5260045ffd5b5f516020611ff95f395f51905f52546001600160a01b0316141590505f6102b7565b3461012c575f36600319011261012c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036103845760206040515f516020611ff95f395f51905f528152f35b3461012c575f36600319011261012c5761012861011c6108a6565b3461012c575f36600319011261012c575f516020611ff95f395f51905f52546040516001600160a01b039091168152602090f35b919060408382031261012c576040519061047482610155565b819380356001600160401b03811161012c5782610492918301610207565b83526020810135916001600160401b03831161012c576020926104b59201610207565b910152565b6001600160401b0381116101705760051b60200190565b81601f8201121561012c578035906104e8826104ba565b926104f660405194856101ab565b82845260208085019360051b8301019181831161012c5760208101935b83851061052257505050505090565b84356001600160401b03811161012c5782016040818503601f19011261012c576040519161054f83610155565b6020820135926001600160401b03841161012c5760408361057788602080988198010161045b565b8352013583820152815201940193610513565b3461012c57602036600319011261012c576004356001600160401b03811161012c576060600319823603011261012c576040516105c681610175565b81600401356105d481610130565b815260248201356001600160401b03811161012c576105f9906004369185010161045b565b602082015260448201356001600160401b03811161012c5761001b92600461062492369201016104d1565b60408201526108d8565b6040519061063d6020836101ab565b5f8252565b3461012c575f36600319011261012c576101286040516106636040826101ab565b60058152640352e302e360dc1b60208201526040519182916020835260208301906100c1565b3461012c57606036600319011261012c576024356004356001600160401b03821161012c576040600319833603011261012c57604051916106c983610155565b80600401356001600160401b03811161012c576106ec9060043691840101610207565b83526024810135906001600160401b03821161012c5760046107119236920101610207565b6020830152604435916001600160401b03831161012c5761073961001b9336906004016104d1565b91610fe2565b602036600319011261012c576004356001600160401b03811161012c5761076d61001b9136906004016104d1565b60405161077981610155565b610781610ff5565b81525f602082015234611810565b602036600319011261012c576004356001600160401b03811161012c5780600401906080600319823603011261012c576001600160a01b036107cf611928565b16330361081d575f6107fc81926107f66107e98680611016565b9190926044369101611048565b91611940565b602081519101305af461080d611082565b901561081557005b602081519101fd5b60405162461bcd60e51b815260206004820152600a6024820152691393d517d2d15493915360b21b6044820152606490fd5b6040519061085c82610190565b60608252565b61086a61084f565b506108947f0000000000000000000000000000000000000000000000000000000000000000611222565b604051906108a182610190565b815290565b6108ae61084f565b506108947f0000000000000000000000000000000000000000000000000000000000000000611222565b5f5160206120195f395f51905f5254906001600160401b03610909604084901c60ff1615936001600160401b031690565b16801590816109fc575b60011490816109f2575b1590816109e9575b506109da57610968908261095f60016001600160401b03195f5160206120195f395f51905f525416175f5160206120195f395f51905f5255565b6109b657610eb3565b61096e57565b5f5160206120195f395f51905f52805460ff60401b19169055604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1565b5f5160206120195f395f51905f52805460ff60401b1916600160401b179055610eb3565b63f92ee8a960e01b5f5260045ffd5b9050155f610925565b303b15915061091d565b839150610913565b90600182811c92168015610a32575b6020831014610a1e57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610a13565b818110610a47575050565b5f8155600101610a3c565b9190601f8111610a6157505050565b6101db925f5260205f20906020601f840160051c83019310610a8b575b601f0160051c0190610a3c565b9091508190610a7e565b91909182516001600160401b03811161017057610abc81610ab68454610a04565b84610a52565b6020601f8211600114610afb578190610aec9394955f92610af0575b50508160011b915f199060031b1c19161790565b9055565b015190505f80610ad8565b601f19821690610b0e845f5260205f2090565b915f5b818110610b4857509583600195969710610b30575b505050811b019055565b01515f1960f88460031b161c191690555f8080610b26565b9192602060018192868b015181550194019201610b11565b91909182519283516001600160401b03811161017057610b8a81610b848554610a04565b85610a52565b6020601f8211600114610bcd5791610bc1826020936001956101db98995f92610af05750508160011b915f199060031b1c19161790565b84555b01519101610a95565b601f19821695610be0855f5260205f2090565b965f5b818110610c265750926101db96976001959386938360209710610c0e575b505050811b018455610bc4565b01515f1960f88460031b161c191690555f8080610c01565b83830151895560019098019760209384019301610be3565b634e487b7160e01b5f52601160045260245ffd5b81810292918115918404141715610c6557565b610c3e565b610c748154610a04565b9081610c7e575050565b601f8211600114610c8f575f905550565b610caf6101db92825f526001601f60205f20920160051c82019101610a3c565b5f81815260208120918190559055565b90805180518051906001600160401b03821161017057610ce982610ce38754610a04565b87610a52565b602090601f8311600114610d3757602093610d228460029795610d309588955f92610af05750508160011b915f199060031b1c19161790565b87555b015160018601610a95565b0151910155565b90601f19831691610d4b875f5260205f2090565b925f5b818110610d94575084610d30946020979394889560029a9860019510610d7c575b505050811b018755610d25565b01515f1960f88460031b161c191690555f8080610d6f565b92936020600181928786015181550195019301610d4e565b815191600160401b8311610170578154838355808410610e07575b506020610dd99101915f5260205f2090565b5f915b838310610de95750505050565b6003602082610dfb6001945186610cbf565b01920192019190610ddc565b80600302906003820403610c655783600302600381048503610c6557835f5260205f2091820191015b818110610e3d5750610dc7565b80610e4a60039254610a04565b80610e69575b50610e5d60018201610c6a565b5f600282015501610e30565b601f8111600114610e7f57505f81555b5f610e50565b610ea2906001601f610e94855f5260205f2090565b920160051c82019101610a3c565b5f8181526020812081835555610e79565b805160405191906001600160a01b0316610ecc83610190565b825260ff5f5160206120195f395f51905f525460401c1615610fd3576101db91610f4460018060a01b038251166040519063a74e5ca560e01b6020830152602482015260248152610f1e6044826101ab565b7f0000000000000000000000000000000000000000000000000000000000000000611f12565b50610f4d610862565b51610f74610f6e610f6e610f5f6108a6565b5194516001600160a01b031690565b9261136a565b6001600160a01b03909116917f542e3741e19b27af9739b3c2fe67ae9fececcd04a33dcb48e178f0f664e502f65f80a4610fcd6040610fb161138d565b92610fc0602082015185610b60565b0191600283519101610dac565b51611474565b631afcd79f60e31b5f5260045ffd5b610fef6101db9392611515565b90611810565b604051906110046040836101ab565b60038252620cae8d60eb1b6020830152565b903590601e198136030182121561012c57018035906001600160401b03821161012c5760200191813603831361012c57565b919082604091031261012c5760405161106081610155565b6020808294803561107081610130565b845201359161107e83610130565b0152565b3d156110ac573d90611093826101ec565b916110a160405193846101ab565b82523d5f602084013e565b606090565b6020906040516110c183826101ab565b5f8152601f1983015f5b8181106110f65750506101db91925f6110e26101cc565b916110eb610ff5565b835282015234611810565b849060405161110481610155565b60405161111081610155565b6060815260608482015281525f83820152828286010152016110cb565b90815f8237015f815290565b611141611e8b565b5f80356001600160e01b031916808252602092909252604090206001600160a01b039054169081156111ec575b506001600160a01b038116156111a9575f80916040518061118f813661112d565b03915af461119b611082565b901561081557602081519101f35b60405162461bcd60e51b815260206004820152601b60248201527a111a585b5bdb990e88199d5b98dd1a5bdb881b9bdd08199bdd5b99602a1b6044820152606490fd5b611212915060016111fb611e8b565b019063ffffffff60e01b165f5260205260405f2090565b546001600160a01b03165f61116e565b60ff811690601f8211611251576040519161123e6040846101ab565b6020808452838101919036833783525290565b632cd44ac360e21b5f5260045ffd5b6040519061126f6040836101ab565b60068252651ad95c9b995b60d21b6020830152565b1561128b57565b6282b42960e81b5f5260045ffd5b6040513d5f823e3d90fd5b6040516352d1902d60e01b81529290916020846004816001600160a01b0387165afa5f9481611324575b506112ef57634c9c8ce360e01b5f526001600160a01b03831660045260245ffd5b90915f516020611ff95f395f51905f528403611310576101db9293506119cd565b632a87526960e21b5f52600484905260245ffd5b9094506020813d602011611350575b81611340602093836101ab565b8101031261012c5751935f6112ce565b3d9150611333565b805191908290602001825e015f815290565b61137a9060405191828092611358565b03902090565b91908203918211610c6557565b60405161139b6060826101ab565b602c81527f616e64726f6d6564612e73746f726167652e73706c69747465722e73706c697460208201526b1d195c8b58dbdb9d1c9858dd60a21b60408201526040516113fd816113ef602082018095611358565b03601f1981018352826101ab565b5190205f198101908111610c655760405190611434826114266020820193849190602083019252565b03601f1981018452836101ab565b9051902060ff191690565b80518210156114535760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b91908201809211610c6557565b5f9190825b81518410156114a557602061148e858461143f565b5101518101809111610c6557600190930192611479565b9050612710919250116114b457565b60405162461bcd60e51b815260206004820152603360248201527f546f74616c2073706c697420627073206d757374206265206c6573732074686160448201527206e206f7220657175616c20746f20313030303606c1b6064820152608490fd5b60405161152181610155565b606081525f60208201525080515115801560208301918251511515908290611636575b1561160157816115f9575b506115b45781515161159e57611578915061157061156b611928565b611a6f565b905190611bb6565b6100fe6115836101cc565b9161158c61062e565b83526001600160a01b03166020830152565b50516115a86101cc565b9081525f602082015290565b60405162461bcd60e51b815260206004820152601f60248201527f43414e4e4f545f42455f424f54485f4e41544956455f414e445f534d415254006044820152606490fd5b90505f61154f565b60405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d054d4d155609a1b6044820152606490fd5b5080611544565b5f929181549161164c83610a04565b80835292600181169081156116a1575060011461166857505050565b5f9081526020812093945091925b838310611687575060209250010190565b600181602092949394548385870101520191019190611676565b915050602093945060ff929192191683830152151560051b010190565b90600160206040516116cf81610155565b61107e81956040516116ec816116e5818561163d565b03826101ab565b83526116fe604051809681930161163d565b03846101ab565b908154611711816104ba565b9261171f60405194856101ab565b81845260208401905f5260205f205f915b83831061173d5750505050565b6003602060019260405161175081610155565b611759866116be565b8152600286015483820152815201920192019190611730565b9061177c826104ba565b61178960405191826101ab565b828152809261179a601f19916104ba565b0190602036910137565b156117ab57565b60405162461bcd60e51b815260206004820152603760248201527f546f74616c2073706c697420616d6f756e74206d757374206265206c657373206044820152761d1a185b881bdc88195c5d585b081d1bc8185b5bdd5b9d604a1b6064820152608490fd5b92909261181b61138d565b611824816116be565b938051155f146119185750600261183b9101611705565b6118458151611772565b945f93845b83518610156118a05761189860019161187c611874602061186b8b8a61143f565b51015189610c52565b612710900490565b611886898c61143f565b52611891888b61143f565b5190611467565b95019461184a565b919395909294506118b3868311156117a4565b5f5b85518110156118e857806118e26118ce6001938b61143f565b51876118da848b61143f565b515191611d15565b016118b5565b509350939094508084106118fd575b50505050565b61190f9361190a91611380565b611d15565b5f8080806118f7565b905061192381611474565b61183b565b6001600160a01b03600361193a611f43565b01541690565b6113ef6119966119b460246100fe95966040519060018060a01b038151166020830152602060018060a01b03910151166040820152604081526119846060826101ab565b80516040519485926020840190611358565b90815263414d504360e01b60208201520360048101845201826101ab565b60208560405196879583870137840101905f8252611358565b90813b15611a4e575f516020611ff95f395f51905f5280546001600160a01b0319166001600160a01b0384169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2805115611a3657611a3391611f12565b50565b505034611a3f57565b63b398979f60e01b5f5260045ffd5b50634c9c8ce360e01b5f9081526001600160a01b0391909116600452602490fd5b604090815190611a7f83836101ab565b600382526276667360e81b60208301526001600160a01b03168015611b6257611acb9291602091611aae6101dd565b9182528351808096819463fd7687ef60e01b8352600483016100e5565b03915afa918215611b5d575f92611b2c575b506001600160a01b03821615611af1575090565b5162461bcd60e51b8152602060048201526015602482015274159194c81859191c995cdcc81b9bdd08199bdd5b99605a1b6044820152606490fd5b611b4f91925060203d602011611b56575b611b4781836101ab565b810190611ba1565b905f611add565b503d611b3d565b611299565b825162461bcd60e51b815260206004820152601860248201527712d95c9b995b081859191c995cdcc81b9bdd08199bdd5b9960421b6044820152606490fd5b9081602091031261012c57516100fe81610130565b611bde91602091604051808095819463c92557a760e01b8352866004840181815201906100c1565b03916001600160a01b03165afa908115611b5d575f91611c42575b506001600160a01b03811615611c0c5790565b60405162461bcd60e51b815260206004820152600e60248201526d14105512081393d5081193d5539160921b6044820152606490fd5b611c5b915060203d602011611b5657611b4781836101ab565b5f611bf9565b15611c6857565b60405162461bcd60e51b815260206004820152600b60248201526a14d1539117d1905253115160aa1b6044820152606490fd5b9081602091031261012c5751801515810361012c5790565b15611cba57565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b6100fe939260609260018060a01b03168252602082015281604082015201906100c1565b611d1f8351611f2f565b60208301519093906001600160a01b031615611e255760200180515190929015611dce5791611d8493915f611d6461032461032460208098015160018060a01b031690565b9251604051630200057560e51b8152968795869485939160048501611cf1565b03925af18015611b5d576101db915f91611d9f575b50611cb3565b611dc1915060203d602011611dc7575b611db981836101ab565b810190611c9b565b5f611d99565b503d611daf565b602090810151611d8494919350611def90610324906001600160a01b031681565b60405163a9059cbb60e01b81526001600160a01b03909216600483015260248201929092529283919082905f9082906044820190565b6020018051519192509015611e5e575180515f938493919260200191906001600160a01b03165af1611e55611082565b90156108155750565b505f808080936101db9582908215611e81575b6001600160a01b031690f1611c61565b6108fc9150611e71565b604051611e996060826101ab565b602481527f616e64726f6d6564612e73746f726167652e7374642e6d73672e7369676e61746020820152637572657360e01b60408201526040516113fd816113ef602082018095611358565b9081518151908181149384611efc575b5050505090565b602092939450820120920120145f808080611ef5565b5f806100fe93602081519101845af4611f29611082565b91611f9a565b6100fe90611f3e61156b611928565b611bb6565b604051611f516060826101ab565b602181527f616e64726f6d6564612e73746f726167652e7374642e61646f2e64656661756c6020820152601d60fa1b60408201526040516113fd816113ef602082018095611358565b90611fbe5750805115611faf57602081519101fd5b63d6bda27560e01b5f5260045ffd5b81511580611fef575b611fcf575090565b639996b31560e01b5f9081526001600160a01b0391909116600452602490fd5b50803b15611fc756fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a264697066735822122059cb20bd9d807e5c0559802dc657d7bfcc7e3b07bccf22e004a01f8e16e11d6e64736f6c634300081e0033f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00";

type SplitterContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SplitterContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SplitterContract__factory extends ContractFactory {
  constructor(...args: SplitterContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    libraryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(libraryAddress, overrides || {});
  }
  override deploy(
    libraryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(libraryAddress, overrides || {}) as Promise<
      SplitterContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SplitterContract__factory {
    return super.connect(runner) as SplitterContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SplitterContractInterface {
    return new Interface(_abi) as SplitterContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SplitterContract {
    return new Contract(address, _abi, runner) as unknown as SplitterContract;
  }
}
