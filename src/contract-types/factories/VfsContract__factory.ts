/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { VfsContract, VfsContractInterface } from "../VfsContract";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "libraryAddress",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "UPGRADE_INTERFACE_VERSION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "add_child",
    inputs: [
      {
        name: "params",
        type: "tuple",
        internalType: "struct IVfsContract.AddChildParams",
        components: [
          {
            name: "parent_address",
            type: "address",
            internalType: "address",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "add_path",
    inputs: [
      {
        name: "params",
        type: "tuple",
        internalType: "struct IVfsContract.AddPathParams",
        components: [
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "child_address",
            type: "address",
            internalType: "address",
          },
          {
            name: "parent_address",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "ado_type",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IContractBase.AdoTypeResponse",
        components: [
          {
            name: "ado_type",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ampReceive",
    inputs: [
      {
        name: "packet",
        type: "tuple",
        internalType: "struct AmpMsgLib.AmpPkt",
        components: [
          {
            name: "message",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "funds",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "ctx",
            type: "tuple",
            internalType: "struct AmpMsgLib.AmpPktCtx",
            components: [
              {
                name: "origin",
                type: "address",
                internalType: "address",
              },
              {
                name: "previous_sender",
                type: "address",
                internalType: "address",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "get_library_name",
    inputs: [
      {
        name: "addr",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "get_username",
    inputs: [
      {
        name: "addr",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "implementation",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "params",
        type: "tuple",
        internalType: "struct IVfsContract.VfsInitParams",
        components: [
          {
            name: "owner",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "register_library",
    inputs: [
      {
        name: "library_name",
        type: "string",
        internalType: "string",
      },
      {
        name: "addr",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "register_username",
    inputs: [
      {
        name: "username",
        type: "string",
        internalType: "string",
      },
      {
        name: "addr",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "resolve_path",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "upgradeToAndCall",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "validatePath",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IContractBase.VersionResponse",
        components: [
          {
            name: "version",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "AdoDefaultInitialized",
    inputs: [
      {
        name: "adoType",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "version",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "adoOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: [],
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidShortString",
    inputs: [],
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: [],
  },
  {
    type: "error",
    name: "StringTooLong",
    inputs: [
      {
        name: "str",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "StringsInsufficientHexLength",
    inputs: [
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "length",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "UUPSUnauthorizedCallContext",
    inputs: [],
  },
  {
    type: "error",
    name: "UUPSUnsupportedProxiableUUID",
    inputs: [
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "Unauthorized",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x61012080604052346102645761002b9061293b80380380916100218285610268565b833981019061029f565b604051610039604082610268565b600381526276667360e81b602082015260405190610058604083610268565b60058252640302e312e360dc1b6020830152306080526040519061007d606083610268565b602182527f616e64726f6d6564612e73746f726167652e7374642e61646f2e64656661756c6020830152601d60fa1b604083015260206100fc604051936100c5604086610268565b60058552640302e302e360dc1b8386015261010e60405195869384936327a0d66960e01b85526040600486015260448501906102be565b838103600319016024850152906102be565b03816001600160a01b0388165afa938415610259576101469461013e935f9161022a575b5060a05260c0526102e2565b60e0526102e2565b610100525f51602061291b5f395f51905f525460ff8160401c1661021b576002600160401b03196001600160401b038216016101c5575b6040516125e49081610337823960805181818161047d01526105b8015260a05181610b53015260c05181505060e0518181816104c00152610a3601526101005181610ac80152f35b6001600160401b0319166001600160401b039081175f51602061291b5f395f51905f52556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f61017d565b63f92ee8a960e01b5f5260045ffd5b61024c915060203d602011610252575b6102448183610268565b81019061029f565b5f610132565b503d61023a565b6040513d5f823e3d90fd5b5f80fd5b601f909101601f19168101906001600160401b0382119082101761028b57604052565b634e487b7160e01b5f52604160045260245ffd5b9081602091031261026457516001600160a01b03811681036102645790565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b601f81511161030d5760208151910151602082106102fe571790565b5f198260200360031b1b161790565b60405163305a27a960e01b8152602060048201529081906103329060248301906102be565b0390fdfe60806040526004361015610015575b36610c8b57005b5f3560e01c8063045ffa79146101145780630c95767f1461010f5780633f67937a1461010a5780634298c388146101055780634f1ef2861461010057806352d1902d146100fb57806354fd4d50146100f65780635622f89d146100f15780635c60da1b146100ec578063689e6f97146100e757806381d6f784146100e25780638f09926d146100dd578063a2bb5d48146100d8578063ad3cb1cc146100d3578063c92557a7146100ce5763ebebcab70361000e57610955565b61092b565b6108e4565b6108a4565b610751565b61072f565b6106cc565b610698565b610659565b6105fd565b6105a6565b61042f565b6103b5565b610359565b6102ba565b610159565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6040610156926020835251916020808201520190610119565b90565b34610184575f36600319011261018457610180610174610a28565b6040519182918261013d565b0390f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b038211176101b757604052565b610188565b604081019081106001600160401b038211176101b757604052565b602081019081106001600160401b038211176101b757604052565b90601f801991011681019081106001600160401b038211176101b757604052565b604051906102226040836101f2565b565b6001600160401b0381116101b757601f01601f191660200190565b92919261024b82610224565b9161025960405193846101f2565b829481845281830111610184578281602093845f960137010152565b9080601f83011215610184578160206101569335910161023f565b600435906001600160a01b038216820361018457565b35906001600160a01b038216820361018457565b34610184576020366003190112610184576004356001600160401b0381116101845760606003198236030112610184576040516102f68161019c565b8160040135916001600160401b03831161018457604461033c916103236103469560043691840101610275565b8452610331602482016102a6565b6020850152016102a6565b6040820152610a6c565b005b906020610156928181520190610119565b34610184576020366003190112610184576101806103a161039b61037b610290565b60036103856118df565b019060018060a01b03165f5260205260405f2090565b54610d74565b604051918291602083526020830190610119565b34610184576020366003190112610184576004356001600160401b0381116101845760406003198236030112610184576040516103f1816101bc565b6103fd826004016102a6565b815260248201356001600160401b038111610184576103469260046104259236920101610275565b6020820152610a9b565b604036600319011261018457610443610290565b6024356001600160401b03811161018457366023820112156101845761047390369060248160040135910161023f565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016308114908115610584575b5061057557813b1561053b57610346916104f26104e47f0000000000000000000000000000000000000000000000000000000000000000610d74565b6104ec61130b565b906120a0565b1561052d5761052861052161051561050861240a565b546001600160a01b031690565b6001600160a01b031690565b331461132f565b611344565b6105286105216105156117c2565b60405162461bcd60e51b81526020600482015260126024820152712727aa2fa4a6a82622a6a2a72a20aa24a7a760711b6044820152606490fd5b63703e46dd60e11b5f5260045ffd5b5f51602061256f5f395f51905f52546001600160a01b0316141590505f6104a8565b34610184575f366003190112610184577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036105755760206040515f51602061256f5f395f51905f528152f35b34610184575f36600319011261018457610180610174610aba565b604060031982011261018457600435906001600160401b0382116101845761064291600401610275565b906024356001600160a01b03811681036101845790565b346101845761069561066a36610618565b600161068061067a9493946118df565b94611956565b93845f52806020526103858360405f20611120565b55005b34610184575f366003190112610184575f51602061256f5f395f51905f52546040516001600160a01b039091168152602090f35b34610184576106956106dd36610618565b60036106ed61067a9493946118df565b93845f52600281016020526103858360405f20611120565b602060031982011261018457600435906001600160401b0382116101845761015691600401610275565b3461018457602061074761074236610705565b6114ec565b6040519015158152f35b346101845760203660031901126101845760405161076e816101d7565b610776610290565b81525f51602061258f5f395f51905f5254906001600160401b036107a960ff604085901c1615936001600160401b031690565b168015908161089c575b6001149081610892575b159081610889575b5061087a5761080890826107ff60016001600160401b03195f51602061258f5f395f51905f525416175f51602061258f5f395f51905f5255565b61085657610aec565b61080e57005b5f51602061258f5f395f51905f52805460ff60401b19169055604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b5f51602061258f5f395f51905f52805460ff60401b1916600160401b179055610aec565b63f92ee8a960e01b5f5260045ffd5b9050155f6107c5565b303b1591506107bd565b8391506107b3565b34610184576020366003190112610184576101806103a161039b6108c6610290565b60016103856118df565b604051906108df6020836101f2565b5f8252565b34610184575f366003190112610184576101806040516109056040826101f2565b60058152640352e302e360dc1b6020820152604051918291602083526020830190610119565b3461018457602061094361093e36610705565b611751565b6040516001600160a01b039091168152f35b6020366003190112610184576004356001600160401b03811161018457806004019060806003198236030112610184576001600160a01b036109956117c2565b1633036109e3575f6109c281926109bc6109af8680610be8565b9190926044369101610c1a565b916117da565b602081519101305af46109d3610c50565b90156109db57005b602081519101fd5b60405162461bcd60e51b815260206004820152600a6024820152691393d517d2d15493915360b21b6044820152606490fd5b60405190610a22826101d7565b60608252565b610a30610a15565b50610a5a7f0000000000000000000000000000000000000000000000000000000000000000610d74565b60405190610a67826101d7565b815290565b60408101518151602090920151610222926001600160a01b03928316929091610a959116610db2565b91611186565b8051602090910151610222916001600160a01b031690610a9533610db2565b610ac2610a15565b50610a5a7f0000000000000000000000000000000000000000000000000000000000000000610d74565b51604051906001600160a01b0316610b03826101d7565b815260ff5f51602061258f5f395f51905f525460401c1615610bd957610b7760018060a01b038251166040519063a74e5ca560e01b6020830152602482015260248152610b516044826101f2565b7f00000000000000000000000000000000000000000000000000000000000000006120cd565b50610b80610a28565b51610ba7610ba1610ba1610b92610aba565b5194516001600160a01b031690565b9261173b565b6001600160a01b03909116917f542e3741e19b27af9739b3c2fe67ae9fececcd04a33dcb48e178f0f664e502f65f80a4565b631afcd79f60e31b5f5260045ffd5b903590601e198136030182121561018457018035906001600160401b0382116101845760200191813603831361018457565b919082604091031261018457604051610c32816101bc565b6020610c4b818395610c43816102a6565b8552016102a6565b910152565b3d15610c7a573d90610c6182610224565b91610c6f60405193846101f2565b82523d5f602084013e565b606090565b90815f8237015f815290565b610c9361201d565b5f80356001600160e01b031916808252602092909252604090206001600160a01b03905416908115610d3e575b506001600160a01b03811615610cfb575f809160405180610ce18136610c7f565b03915af4610ced610c50565b90156109db57602081519101f35b60405162461bcd60e51b815260206004820152601b60248201527a111a585b5bdb990e88199d5b98dd1a5bdb881b9bdd08199bdd5b99602a1b6044820152606490fd5b610d6491506001610d4d61201d565b019063ffffffff60e01b165f5260205260405f2090565b546001600160a01b03165f610cc0565b60ff811690601f8211610da35760405191610d906040846101f2565b6020808452838101919036833783525290565b632cd44ac360e21b5f5260045ffd5b6001600160a01b031680610dc6602a6118a1565b916030610dd2846114a0565b536078610dde846114ad565b53610de96028611477565b60018111610e115750610dfa575090565b63e22e27eb60e01b5f52600452601460245260445ffd5b90600f81166010811015610e5957610e5491610e4e916f181899199a1a9b1b9c1cb0b131b232b360811b901a610e4785886114bd565b5360041c90565b916118d3565b610de9565b6110e5565b611463565b805191908290602001825e015f815290565b61022290610ea1610e93949360016040519687946020860190610e63565b602f60f81b81520190610e63565b03601f1981018452836101f2565b90600182811c92168015610edd575b6020831014610ec957565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610ebe565b9060405191825f825492610efa84610eaf565b8084529360018116908115610f635750600114610f1f575b50610222925003836101f2565b90505f9291925260205f20905f915b818310610f47575050906020610222928201015f610f12565b6020919350806001915483858901015201910190918492610f2e565b90506020925061022294915060ff191682840152151560051b8201015f610f12565b15610f8c57565b60405162461bcd60e51b81526020600482015260176024820152761410551217d053149150511657d49151d254d511549151604a1b6044820152606490fd5b601f8211610fd857505050565b5f5260205f20906020601f840160051c83019310611010575b601f0160051c01905b818110611005575050565b5f8155600101610ffa565b9091508190610ff1565b91909182516001600160401b0381116101b7576110418161103b8454610eaf565b84610fcb565b6020601f82116001146110805781906110719394955f92611075575b50508160011b915f199060031b1c19161790565b9055565b015190505f8061105d565b601f19821690611093845f5260205f2090565b915f5b8181106110cd575095836001959697106110b5575b505050811b019055565b01515f1960f88460031b161c191690555f80806110ab565b9192602060018192868b015181550194019201611096565b634e487b7160e01b5f52603260045260245ffd5b805490600160401b8210156101b75760018201808255821015610e59575f5260205f200155565b80546001600160a01b0319166001600160a01b03909216919091179055565b80549190600160401b8310156101b75760018301808255831015610e5957610222926001915f5260205f2090821b0191805183556020828060a01b03910151169101611120565b90916111906118df565b926111a38161119e85610db2565b610e75565b6020815191012060048501815f528060205260405f20604051905f908054906111cb82610eaf565b80855291600181169081156112e457506001146112a7575b50508561122661127295611230956112196112148761120c6112779d9c9961122b9903826101f2565b6104ec6108d0565b610f85565b905f5260205260405f2090565b61101a565b611956565b93611257856112528360058a019060018060a01b03165f5260205260405f2090565b6110f9565b61125f610213565b9485526001600160a01b03166020850152565b6119aa565b929061128257505050565b6102229260066112a292019060018060a01b03165f5260205260405f2090565b61113f565b5f908152602081209092505b8183106112ca5750508101602001856112266111e3565b6001816020929493945483858801015201910191906112b3565b60ff191660208087019190915292151560051b8501909201925087915061122690506111e3565b6040519061131a6040836101f2565b60068252651ad95c9b995b60d21b6020830152565b1561133657565b6282b42960e81b5f5260045ffd5b6040516352d1902d60e01b81529290916020846004816001600160a01b0387165afa5f94816113c4575b5061138f57634c9c8ce360e01b5f526001600160a01b03831660045260245ffd5b90915f51602061256f5f395f51905f5284036113b0576102229293506119b9565b632a87526960e21b5f52600484905260245ffd5b9094506020813d6020116113f0575b816113e0602093836101f2565b810103126101845751935f61136e565b3d91506113d3565b604051906114076040836101f2565b60068252656962633a2f2f60d01b6020830152565b6040519061142b6040836101f2565b60068252652f686f6d652f60d01b6020830152565b6040519061144f6040836101f2565b60058252642f6c69622f60d81b6020830152565b634e487b7160e01b5f52601160045260245ffd5b9060018201809211610e5e57565b6028019081602811610e5e57565b91908201809211610e5e57565b805115610e595760200190565b805160011015610e595760210190565b908151811015610e59570160200190565b600411156114d857565b634e487b7160e01b5f52602160045260245ffd5b80518015611735575f916114fe6113f8565b9261150761141c565b93611510611440565b9061151b8185611a5b565b61172c575b5061152c858385611aaf565b156116945750611540906001945190611493565b8281116115f657805b83811080611677575b1561155f57600101611549565b9381851461166e57611570816114ce565b60018114801561165b575b1561161e575061159784611590818486611c08565b9284611b90565b5090811561160e575b5015611607575f925b8281146115fe57602f60f81b6115e06115d36115c584866114bd565b516001600160f81b03191690565b6001600160f81b03191690565b036115f657600101928284146115f65792611540565b505050505f90565b50505050600190565b5050505f90565b6116189150611cc9565b5f6115a0565b938161162c82809486611b90565b501561164357505060015b6115a957505050505f90565b611656916116519185611c08565b611c64565b611637565b50611665816114ce565b6003811461157b565b50505050505f90565b50602f60f81b61168d6115d36115c584876114bd565b1415611552565b93506116a1848284611aaf565b156116bc576116b4906002945190611493565b925b92611540565b9250603f60f91b6001600160f81b03196116d96115c586856114bd565b1603611607576116ea600393611477565b9282841080611709575b156116b6579261170390611477565b926116b6565b50602f60f81b6001600160f81b03196117256115c587866114bd565b16146116f4565b5191505f611520565b50505f90565b61174b9060405191828092610e63565b03902090565b61175c815182611b18565b906117bd575061176b81611d2e565b6117785761015690611dbe565b60405162461bcd60e51b815260206004820152601f60248201527f50524f544f434f4c5f504154485f4e4f545f535550504f525445445f594554006044820152606490fd5b905090565b6001600160a01b0360036117d461240a565b01541690565b61186761183061184e602461015695966040519060018060a01b038151166020830152602060018060a01b039101511660408201526040815261181e6060826101f2565b80516040519485926020840190610e63565b90815263414d504360e01b60208201520360048101845201826101f2565b60208560405196879583870137840101905f8252610e63565b03601f1981018352826101f2565b908160011b9180830460021490151715610e5e57565b908160041b9180830460101490151715610e5e57565b906118ab82610224565b6118b860405191826101f2565b82815280926118c9601f1991610224565b0190602036910137565b8015610e5e575f190190565b604080516118ed82826101f2565b6018815277616e64726f6d6564612e73746f726167652e6f732e76667360401b6020820152815161192681611867602082018095610e63565b5190205f198101908111610e5e5761194b8251926020840192835260208452836101f2565b9051902060ff191690565b601f815111611981576020815191015160208210611972571790565b5f198260200360031b1b161790565b60405163305a27a960e01b8152602060048201529081906119a6906024830190610119565b0390fd5b80516119b591611b18565b9091565b90813b15611a3a575f51602061256f5f395f51905f5280546001600160a01b0319166001600160a01b0384169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2805115611a2257611a1f916120cd565b50565b505034611a2b57565b63b398979f60e01b5f5260045ffd5b50634c9c8ce360e01b5f9081526001600160a01b0391909116600452602490fd5b908151815111611735575f5b8151811015611aa757611a7a81846114bd565b516001600160f81b031916611a8f82846114bd565b516001600160f81b0319160361160757600101611a67565b505050600190565b91909180518251840190818511610e5e5710611607575f5b82518110156115fe57808401808511610e5e57611ae490836114bd565b516001600160f81b031916611aff6115d36115c584876114bd565b6001600160f81b0319909116036115f657600101611ac7565b90815181118015611b89575b611b65576001811180611b6d575b611b40611b45911515611875565b611485565b8103611b65575f611b55926120ea565b90916001600160a01b0390911690565b50505f905f90565b5060208201516001600160f01b03191661060f60f31b14611b32565b505f611b24565b9190825182118015611bff575b611bd857611baa81611477565b821180611be1575b611b40611bc0911515611875565b818303838111610e5e5703611bd857611b55926120ea565b5050505f905f90565b50602081840101516001600160f01b03191661060f60f31b14611bb2565b50818111611b9d565b91818103908111610e5e57611c1c816118a1565b925f5b828110611c2d575050505090565b80840190818511610e5e576001916001600160f81b031990611c4f90856114bd565b51165f1a611c5d82886114bd565b5301611c1f565b805190600282108015611cbf575b611735575f5b828110611c8757505050600190565b611cb3600180611c9784866114bd565b51693ffffff43ffffff01ffb602d1b60f89190911c1c16141590565b61160757600101611c78565b5060508211611c72565b805190600282108015611d24575b611735575f5b828110611cec57505050600190565b611d18600180611cfc84866114bd565b516907fffffe0000000003ff60301b60f89190911c1c16141590565b61160757600101611cdd565b50601e8211611cd7565b805115611d76576020810180519091906001600160f81b031916602f60f81b14611735575115610e5957516001600160f81b031916603f60f91b14611d7257600190565b5f90565b505f90565b60405190611d8a6040836101f2565b6004825263686f6d6560e01b6020830152565b60405190611dac6040836101f2565b60038252623634b160e91b6020830152565b805115611fda57611ddd611dd46115c5836114a0565b918051906121c2565b906001600160f81b031916603f60f91b8114611f9957602f60f81b03611f4557611e23611e0982612531565b91611e1d611e1784836121ef565b93611477565b90612194565b90805115611ef657611e3c611e36611d7b565b826120a0565b611edc57611e4c906104ec611d9d565b611ea95760405162461bcd60e51b815260206004820152602b60248201527f494e56414c49445f504154483a2066697273742070617274206973206e6f742060448201526a3437b6b29037b9103634b160a91b6064820152608490fd5b80611ed6611ed0611ebc61015694612531565b92611e1d611eca85836121ef565b94611477565b916123a2565b906122c2565b5080611ed6611ef0611ebc61015694612531565b9161221a565b60405162461bcd60e51b815260206004820152602160248201527f494e56414c49445f504154483a206669727374207061727420697320656d70746044820152607960f81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602660248201527f494e56414c49445f504154483a20706174682073686f756c642073746172742060448201526577697468202f60d01b6064820152608490fd5b50611fa381612531565b90611fb6611fb183836121ef565b61221a565b915f198114611fd5576101569291611e1d611fd092611477565b6122c2565b505090565b60405162461bcd60e51b815260206004820152601b60248201527a494e56414c49445f504154483a207061746820697320656d70747960281b6044820152606490fd5b60405161202b6060826101f2565b602481527f616e64726f6d6564612e73746f726167652e7374642e6d73672e7369676e61746020820152637572657360e01b604082015260405161207781611867602082018095610e63565b5190205f198101908111610e5e576040519061194b82610ea16020820193849190602083019252565b90815181519081811493846120b7575b5050505090565b602092939450820120920120145f8080806120b0565b5f8061015693602081519101845af46120e4610c50565b91612461565b9290926120f684611477565b831180612176575b61211061211791949293941515611875565b5f95611493565b915b8183106121295750505060019190565b9092919360ff61214a6121456020888601015160ff60f81b1690565b6124bf565b1690600f821161216b579061216060019261188b565b019401919290612119565b505f94508493505050565b50602084820101516001600160f01b03191661060f60f31b146120fe565b80519091818118908211028118808203918211610e5e576020906121b7836118a1565b930101602083015e90565b9081519081808210911802188060011081600118028118808203918211610e5e576020906121b7836118a1565b908151908180821091180280821891141581028118808203918211610e5e576020906121b7836118a1565b612225815182611b18565b906117bd575061223c6122366118df565b91611956565b5f5260205260018060a01b0360405f20541680156122575790565b60405162461bcd60e51b81526020600482015260126024820152711554d1549390535157d393d517d193d5539160721b6044820152606490fd5b90610222610ea1926040519384916f02820aa242fa727aa2fa327aaa7221d160851b60208401526030830190610e63565b80511561239e576122d281612531565b916122dd83836121ef565b916040516122ec6020826101f2565b5f81529360018101612381575b505061232f6123349160046123198561119e6123136118df565b94610db2565b602081519101209101905f5260205260405f2090565b610ee7565b906123466123406108d0565b836120a0565b61235d575061235490611751565b610156916122c2565b6123696119a691612291565b60405162461bcd60e51b815291829160048301610348565b61233492945061232f91611e1d61239792611477565b93916122f9565b5090565b6123b660026123af6118df565b0191611956565b5f5260205260018060a01b0360405f20541680156123d15790565b60405162461bcd60e51b81526020600482015260116024820152701312509490549657d393d517d193d55391607a1b6044820152606490fd5b6040516124186060826101f2565b602181527f616e64726f6d6564612e73746f726167652e7374642e61646f2e64656661756c6020820152601d60fa1b604082015260405161207781611867602082018095610e63565b90612485575080511561247657602081519101fd5b63d6bda27560e01b5f5260045ffd5b815115806124b6575b612496575090565b639996b31560e01b5f9081526001600160a01b0391909116600452602490fd5b50803b1561248e565b60f81c602f811180612527575b156124db57602f190160ff1690565b606081118061251d575b156124f4576056190160ff1690565b6040811180612513575b1561250d576036190160ff1690565b5060ff90565b50604781106124fe565b50606781106124e5565b50603a81106124cc565b8051905f5b828110612545575050505f1990565b818101602001516001600160f81b031916602f60f81b1461256857600101612536565b9150509056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a26469706673582212204de027cacf627a68c454a18dff9e4b2b536829e684359619b927d20abe7d7eb064736f6c634300081e0033f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00";

type VfsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VfsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VfsContract__factory extends ContractFactory {
  constructor(...args: VfsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    libraryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(libraryAddress, overrides || {});
  }
  override deploy(
    libraryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(libraryAddress, overrides || {}) as Promise<
      VfsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): VfsContract__factory {
    return super.connect(runner) as VfsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VfsContractInterface {
    return new Interface(_abi) as VfsContractInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): VfsContract {
    return new Contract(address, _abi, runner) as unknown as VfsContract;
  }
}
