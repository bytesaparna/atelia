/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IContractBase {
  export type AdoTypeResponseStruct = { ado_type: string };

  export type AdoTypeResponseStructOutput = [ado_type: string] & {
    ado_type: string;
  };

  export type VersionResponseStruct = { version: string };

  export type VersionResponseStructOutput = [version: string] & {
    version: string;
  };
}

export declare namespace AmpMsgLib {
  export type AmpPktCtxStruct = {
    origin: AddressLike;
    previous_sender: AddressLike;
  };

  export type AmpPktCtxStructOutput = [
    origin: string,
    previous_sender: string
  ] & { origin: string; previous_sender: string };

  export type AmpPktStruct = {
    message: BytesLike;
    funds: BigNumberish;
    ctx: AmpMsgLib.AmpPktCtxStruct;
  };

  export type AmpPktStructOutput = [
    message: string,
    funds: bigint,
    ctx: AmpMsgLib.AmpPktCtxStructOutput
  ] & { message: string; funds: bigint; ctx: AmpMsgLib.AmpPktCtxStructOutput };
}

export declare namespace IAuctionContract {
  export type AuctionContractInitParamsStruct = {
    owner: AddressLike;
    token_address: string;
  };

  export type AuctionContractInitParamsStructOutput = [
    owner: string,
    token_address: string
  ] & { owner: string; token_address: string };

  export type TokenAuctionStateStruct = {
    high_bidder_addr: AddressLike;
    high_bidder_amount: BigNumberish;
    is_cancelled: boolean;
    is_bought: boolean;
    is_claimed: boolean;
    auction_id: BigNumberish;
    start_time: BigNumberish;
    end_time: BigNumberish;
    buy_now_price: BigNumberish;
    min_bid: BigNumberish;
    min_raise: BigNumberish;
    recipient: RecipientLib.RecipientStruct;
    bid_asset: AssetLib.ResolvedAssetStruct;
    owner: AddressLike;
  };

  export type TokenAuctionStateStructOutput = [
    high_bidder_addr: string,
    high_bidder_amount: bigint,
    is_cancelled: boolean,
    is_bought: boolean,
    is_claimed: boolean,
    auction_id: bigint,
    start_time: bigint,
    end_time: bigint,
    buy_now_price: bigint,
    min_bid: bigint,
    min_raise: bigint,
    recipient: RecipientLib.RecipientStructOutput,
    bid_asset: AssetLib.ResolvedAssetStructOutput,
    owner: string
  ] & {
    high_bidder_addr: string;
    high_bidder_amount: bigint;
    is_cancelled: boolean;
    is_bought: boolean;
    is_claimed: boolean;
    auction_id: bigint;
    start_time: bigint;
    end_time: bigint;
    buy_now_price: bigint;
    min_bid: bigint;
    min_raise: bigint;
    recipient: RecipientLib.RecipientStructOutput;
    bid_asset: AssetLib.ResolvedAssetStructOutput;
    owner: string;
  };

  export type StartAuctionParamsStruct = {
    token_id: BigNumberish;
    min_bid: BigNumberish;
    min_raise: BigNumberish;
    schedule: ScheduleLib.ScheduleStruct;
    recipient: RecipientLib.RecipientStruct;
    bid_asset: AssetLib.AssetStruct;
    buy_now_price: BigNumberish;
  };

  export type StartAuctionParamsStructOutput = [
    token_id: bigint,
    min_bid: bigint,
    min_raise: bigint,
    schedule: ScheduleLib.ScheduleStructOutput,
    recipient: RecipientLib.RecipientStructOutput,
    bid_asset: AssetLib.AssetStructOutput,
    buy_now_price: bigint
  ] & {
    token_id: bigint;
    min_bid: bigint;
    min_raise: bigint;
    schedule: ScheduleLib.ScheduleStructOutput;
    recipient: RecipientLib.RecipientStructOutput;
    bid_asset: AssetLib.AssetStructOutput;
    buy_now_price: bigint;
  };
}

export declare namespace RecipientLib {
  export type RecipientStruct = { recipient: string; message: BytesLike };

  export type RecipientStructOutput = [recipient: string, message: string] & {
    recipient: string;
    message: string;
  };
}

export declare namespace AssetLib {
  export type ResolvedAssetStruct = { native: string; smart: AddressLike };

  export type ResolvedAssetStructOutput = [native: string, smart: string] & {
    native: string;
    smart: string;
  };

  export type AssetStruct = { native: string; smart: string };

  export type AssetStructOutput = [native: string, smart: string] & {
    native: string;
    smart: string;
  };
}

export declare namespace ScheduleLib {
  export type ExpiryStruct = {
    from_now: BigNumberish;
    at_time: BigNumberish;
    infinite: boolean;
  };

  export type ExpiryStructOutput = [
    from_now: bigint,
    at_time: bigint,
    infinite: boolean
  ] & { from_now: bigint; at_time: bigint; infinite: boolean };

  export type ScheduleStruct = {
    start: ScheduleLib.ExpiryStruct;
    end: ScheduleLib.ExpiryStruct;
  };

  export type ScheduleStructOutput = [
    start: ScheduleLib.ExpiryStructOutput,
    end: ScheduleLib.ExpiryStructOutput
  ] & {
    start: ScheduleLib.ExpiryStructOutput;
    end: ScheduleLib.ExpiryStructOutput;
  };
}

export interface AuctionContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "ado_type"
      | "ampReceive"
      | "bid(uint256)"
      | "bid(uint256,uint256)"
      | "claim(uint256)"
      | "claim(uint256,address)"
      | "implementation"
      | "initialize"
      | "latest_auction_state"
      | "proxiableUUID"
      | "start_auction"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdoDefaultInitialized"
      | "AuctionStarted"
      | "Initialized"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ado_type", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ampReceive",
    values: [AmpMsgLib.AmpPktStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bid(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bid(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [IAuctionContract.AuctionContractInitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "latest_auction_state",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start_auction",
    values: [IAuctionContract.StartAuctionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ado_type", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ampReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bid(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bid(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latest_auction_state",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "start_auction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AdoDefaultInitializedEvent {
  export type InputTuple = [
    adoType: string,
    version: string,
    adoOwner: AddressLike
  ];
  export type OutputTuple = [
    adoType: string,
    version: string,
    adoOwner: string
  ];
  export interface OutputObject {
    adoType: string;
    version: string;
    adoOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionStartedEvent {
  export type InputTuple = [token_id: BigNumberish, auction_id: BigNumberish];
  export type OutputTuple = [token_id: bigint, auction_id: bigint];
  export interface OutputObject {
    token_id: bigint;
    auction_id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuctionContract extends BaseContract {
  connect(runner?: ContractRunner | null): AuctionContract;
  waitForDeployment(): Promise<this>;

  interface: AuctionContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  ado_type: TypedContractMethod<
    [],
    [IContractBase.AdoTypeResponseStructOutput],
    "view"
  >;

  ampReceive: TypedContractMethod<
    [packet: AmpMsgLib.AmpPktStruct],
    [void],
    "payable"
  >;

  "bid(uint256)": TypedContractMethod<
    [auction_id: BigNumberish],
    [void],
    "payable"
  >;

  "bid(uint256,uint256)": TypedContractMethod<
    [auction_id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "claim(uint256)": TypedContractMethod<
    [auction_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  "claim(uint256,address)": TypedContractMethod<
    [auction_id: BigNumberish, recipient_addr: AddressLike],
    [void],
    "nonpayable"
  >;

  implementation: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [params: IAuctionContract.AuctionContractInitParamsStruct],
    [void],
    "nonpayable"
  >;

  latest_auction_state: TypedContractMethod<
    [token_id: BigNumberish],
    [IAuctionContract.TokenAuctionStateStructOutput],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  start_auction: TypedContractMethod<
    [params: IAuctionContract.StartAuctionParamsStruct],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<
    [],
    [IContractBase.VersionResponseStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ado_type"
  ): TypedContractMethod<
    [],
    [IContractBase.AdoTypeResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "ampReceive"
  ): TypedContractMethod<[packet: AmpMsgLib.AmpPktStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "bid(uint256)"
  ): TypedContractMethod<[auction_id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "bid(uint256,uint256)"
  ): TypedContractMethod<
    [auction_id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim(uint256)"
  ): TypedContractMethod<[auction_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim(uint256,address)"
  ): TypedContractMethod<
    [auction_id: BigNumberish, recipient_addr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [params: IAuctionContract.AuctionContractInitParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "latest_auction_state"
  ): TypedContractMethod<
    [token_id: BigNumberish],
    [IAuctionContract.TokenAuctionStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "start_auction"
  ): TypedContractMethod<
    [params: IAuctionContract.StartAuctionParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<
    [],
    [IContractBase.VersionResponseStructOutput],
    "view"
  >;

  getEvent(
    key: "AdoDefaultInitialized"
  ): TypedContractEvent<
    AdoDefaultInitializedEvent.InputTuple,
    AdoDefaultInitializedEvent.OutputTuple,
    AdoDefaultInitializedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionStarted"
  ): TypedContractEvent<
    AuctionStartedEvent.InputTuple,
    AuctionStartedEvent.OutputTuple,
    AuctionStartedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdoDefaultInitialized(string,string,address)": TypedContractEvent<
      AdoDefaultInitializedEvent.InputTuple,
      AdoDefaultInitializedEvent.OutputTuple,
      AdoDefaultInitializedEvent.OutputObject
    >;
    AdoDefaultInitialized: TypedContractEvent<
      AdoDefaultInitializedEvent.InputTuple,
      AdoDefaultInitializedEvent.OutputTuple,
      AdoDefaultInitializedEvent.OutputObject
    >;

    "AuctionStarted(uint256,uint256)": TypedContractEvent<
      AuctionStartedEvent.InputTuple,
      AuctionStartedEvent.OutputTuple,
      AuctionStartedEvent.OutputObject
    >;
    AuctionStarted: TypedContractEvent<
      AuctionStartedEvent.InputTuple,
      AuctionStartedEvent.OutputTuple,
      AuctionStartedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
