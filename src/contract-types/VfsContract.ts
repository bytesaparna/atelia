/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IVfsContract {
  export type AddChildParamsStruct = {
    parent_address: AddressLike;
    name: string;
  };

  export type AddChildParamsStructOutput = [
    parent_address: string,
    name: string
  ] & { parent_address: string; name: string };

  export type AddPathParamsStruct = {
    name: string;
    child_address: AddressLike;
    parent_address: AddressLike;
  };

  export type AddPathParamsStructOutput = [
    name: string,
    child_address: string,
    parent_address: string
  ] & { name: string; child_address: string; parent_address: string };

  export type VfsInitParamsStruct = { owner: AddressLike };

  export type VfsInitParamsStructOutput = [owner: string] & { owner: string };
}

export declare namespace IContractBase {
  export type AdoTypeResponseStruct = { ado_type: string };

  export type AdoTypeResponseStructOutput = [ado_type: string] & {
    ado_type: string;
  };

  export type VersionResponseStruct = { version: string };

  export type VersionResponseStructOutput = [version: string] & {
    version: string;
  };
}

export declare namespace AmpMsgLib {
  export type AmpPktCtxStruct = {
    origin: AddressLike;
    previous_sender: AddressLike;
  };

  export type AmpPktCtxStructOutput = [
    origin: string,
    previous_sender: string
  ] & { origin: string; previous_sender: string };

  export type AmpPktStruct = {
    message: BytesLike;
    funds: BigNumberish;
    ctx: AmpMsgLib.AmpPktCtxStruct;
  };

  export type AmpPktStructOutput = [
    message: string,
    funds: bigint,
    ctx: AmpMsgLib.AmpPktCtxStructOutput
  ] & { message: string; funds: bigint; ctx: AmpMsgLib.AmpPktCtxStructOutput };
}

export interface VfsContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "add_child"
      | "add_path"
      | "ado_type"
      | "ampReceive"
      | "get_library_name"
      | "get_username"
      | "implementation"
      | "initialize"
      | "proxiableUUID"
      | "register_library"
      | "register_username"
      | "resolve_path"
      | "upgradeToAndCall"
      | "validatePath"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AdoDefaultInitialized" | "Initialized" | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add_child",
    values: [IVfsContract.AddChildParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "add_path",
    values: [IVfsContract.AddPathParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "ado_type", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ampReceive",
    values: [AmpMsgLib.AmpPktStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "get_library_name",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "get_username",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [IVfsContract.VfsInitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register_library",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register_username",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve_path",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePath",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add_child", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add_path", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ado_type", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ampReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_library_name",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_username",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "register_library",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "register_username",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolve_path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AdoDefaultInitializedEvent {
  export type InputTuple = [
    adoType: string,
    version: string,
    adoOwner: AddressLike
  ];
  export type OutputTuple = [
    adoType: string,
    version: string,
    adoOwner: string
  ];
  export interface OutputObject {
    adoType: string;
    version: string;
    adoOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VfsContract extends BaseContract {
  connect(runner?: ContractRunner | null): VfsContract;
  waitForDeployment(): Promise<this>;

  interface: VfsContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  add_child: TypedContractMethod<
    [params: IVfsContract.AddChildParamsStruct],
    [void],
    "nonpayable"
  >;

  add_path: TypedContractMethod<
    [params: IVfsContract.AddPathParamsStruct],
    [void],
    "nonpayable"
  >;

  ado_type: TypedContractMethod<
    [],
    [IContractBase.AdoTypeResponseStructOutput],
    "view"
  >;

  ampReceive: TypedContractMethod<
    [packet: AmpMsgLib.AmpPktStruct],
    [void],
    "payable"
  >;

  get_library_name: TypedContractMethod<[addr: AddressLike], [string], "view">;

  get_username: TypedContractMethod<[addr: AddressLike], [string], "view">;

  implementation: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [params: IVfsContract.VfsInitParamsStruct],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  register_library: TypedContractMethod<
    [library_name: string, addr: AddressLike],
    [void],
    "nonpayable"
  >;

  register_username: TypedContractMethod<
    [username: string, addr: AddressLike],
    [void],
    "nonpayable"
  >;

  resolve_path: TypedContractMethod<[path: string], [string], "view">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  validatePath: TypedContractMethod<[path: string], [boolean], "view">;

  version: TypedContractMethod<
    [],
    [IContractBase.VersionResponseStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "add_child"
  ): TypedContractMethod<
    [params: IVfsContract.AddChildParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "add_path"
  ): TypedContractMethod<
    [params: IVfsContract.AddPathParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ado_type"
  ): TypedContractMethod<
    [],
    [IContractBase.AdoTypeResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "ampReceive"
  ): TypedContractMethod<[packet: AmpMsgLib.AmpPktStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "get_library_name"
  ): TypedContractMethod<[addr: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "get_username"
  ): TypedContractMethod<[addr: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [params: IVfsContract.VfsInitParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "register_library"
  ): TypedContractMethod<
    [library_name: string, addr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "register_username"
  ): TypedContractMethod<
    [username: string, addr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolve_path"
  ): TypedContractMethod<[path: string], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "validatePath"
  ): TypedContractMethod<[path: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<
    [],
    [IContractBase.VersionResponseStructOutput],
    "view"
  >;

  getEvent(
    key: "AdoDefaultInitialized"
  ): TypedContractEvent<
    AdoDefaultInitializedEvent.InputTuple,
    AdoDefaultInitializedEvent.OutputTuple,
    AdoDefaultInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdoDefaultInitialized(string,string,address)": TypedContractEvent<
      AdoDefaultInitializedEvent.InputTuple,
      AdoDefaultInitializedEvent.OutputTuple,
      AdoDefaultInitializedEvent.OutputObject
    >;
    AdoDefaultInitialized: TypedContractEvent<
      AdoDefaultInitializedEvent.InputTuple,
      AdoDefaultInitializedEvent.OutputTuple,
      AdoDefaultInitializedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
